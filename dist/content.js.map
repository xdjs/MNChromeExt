{
  "version": 3,
  "sources": ["../src/backend/linkExtractors.ts", "../src/backend/server/youtubeQueries.ts", "../src/backend/pageScraper.ts", "../src/backend/mediaSession.ts", "../src/connections/listener.ts"],
  "sourcesContent": ["export function getVideoId(url: string): string | null {\r\n    const patterns = [\r\n        /v=([^&]+)/,\r\n        /youtu\\.be\\/([^?&]+)/,\r\n        /embed\\/([^?&]+)/,\r\n        /music\\.youtube\\.com\\/watch\\?v=([^&]+)/, // YouTube Music: ?v=ABC123\r\n    ];\r\n    for (const re of patterns) {\r\n        const match = url.match(re);\r\n        if (match) {\r\n            console.log(match[1]);\r\n            return match[1];\r\n            \r\n        }\r\n    }\r\n    return null;\r\n}", "// NOTE: API key is inlined at build time by esbuild define\r\nconst API_KEY = process.env.YT_API_KEY as string;\r\n\r\nexport interface YTinfo {\r\n    title: string;\r\n    channel: string;\r\n    description: string;\r\n    tags: string[];\r\n    id: string;\r\n}\r\n\r\nexport async function fetchYTInfo(videoId: string): Promise<YTinfo | null> {\r\n    const url = `https://www.googleapis.com/youtube/v3/videos?` +\r\n                `part=snippet&id=${videoId}&key=${API_KEY}`;\r\n    const res = await fetch(url);\r\n    const data = await res.json();\r\n\r\n    if (!data.items?.length) {\r\n        return null;\r\n    }\r\n\r\n    const snip = data.items[0].snippet;\r\n    console.log(snip.channelId);\r\n    return {\r\n        title: snip.title,\r\n        channel: snip.channelTitle,\r\n        description: snip.description,\r\n        tags: snip.tags,\r\n        id: snip.channelId\r\n    };\r\n}", "\r\n\r\nexport interface youTubeInfo {\r\n    videoTitle: String;\r\n    channel: String;\r\n    description: String;\r\n    username?: String;\r\n}\r\n\r\n\r\nexport function scrapeYTInfo(): youTubeInfo | null {\r\n    // Fallback selectors for both old and new YouTube layouts\r\n    \r\n    let title: Element | null;\r\n\r\n    let channelName: Element | null;\r\n\r\n    if (location.hostname === 'music.youtube.com') {\r\n        // YouTube Music selectors\r\n        title = document.querySelector('.title.ytmusic-player-bar');\r\n        channelName = document.querySelector('.byline.ytmusic-player-bar a');\r\n    // ... YouTube Music specific DOM selectors\r\n    }\r\n\r\n    else {\r\n        title = document.querySelector('h1.title yt-formatted-string')\r\n        || document.querySelector('ytd-watch-metadata h1');\r\n\r\n        channelName = document.querySelector('#owner-name a')\r\n        || document.querySelector('ytd-channel-name#channel-name a');\r\n    }\r\n    \r\n\r\n    const ytDescription = document.querySelector('#description');\r\n\r\n    const ytUsername = document.querySelector<HTMLAnchorElement>('a.yt-simple-endpoint.style-scope.yt-formatted-string[href^=\"/@\"]');\r\n\r\n    console.log('[YT-EXT] titleEl', title, 'channelEl', channelName);\r\n\r\n    if (title) {\r\n        console.log('Title: ', title.textContent!.trim());\r\n    }\r\n\r\n    if (channelName) {\r\n        console.log('Channel: ', channelName.textContent!.trim());\r\n    }\r\n    if (channelName && title && ytDescription) {\r\n        console.log(ytUsername?.textContent?.trim());\r\n        return {\r\n            videoTitle: title.textContent!.trim(),\r\n            channel: channelName.textContent!.trim(),\r\n            description: ytDescription?.textContent!.trim(),\r\n            username: ytUsername?.textContent!.trim()\r\n        }\r\n    }\r\n    console.log('no info found');\r\n    return null;\r\n    \r\n}", "import { artists } from \"./server/db/schema.js\";\n\nexport function detectMediaSession() {\n    if (!('mediaSession' in navigator)) {\n        console.log('Media Session API not supported');\n        return null;\n    }\n\n    const data = navigator.mediaSession.metadata;\n    const playbackState = navigator.mediaSession.playbackState;\n    \n    console.log('Media Session Debug:', {\n        metadata: data,\n        playbackState: playbackState,\n        hasMetadata: !!data,\n        url: window.location.href\n    });\n\n    // Be less strict - check for any metadata, not just playing state\n    if (playbackState === 'paused') {\n        return null;\n    }\n\n    // Allow any playback state, not just 'playing'\n    if (!data) {\n        console.log('No useful media session data (no title or artist)');\n        return null;\n    }\n\n    return {\n        title: data.title || '',\n        channel: data.artist || '', // Fixed: was 'channel'\n        album: data.album || '',\n        source: 'mediaSession',\n        playbackState: playbackState,\n        url: window.location.href,\n        domain: window.location.hostname\n    };\n}\n\n\n", "import { getVideoId } from \"../backend/linkExtractors.js\";\nimport { fetchYTInfo } from \"../backend/server/youtubeQueries.js\";\n// @ts-ignore -- compiled file provides the export\nimport { scrapeYTInfo } from \"../backend/pageScraper\";\nimport { detectMediaSession } from \"../backend/mediaSession.js\";\n\n\nconsole.log('[YT-EXT] content script injected');\n\nchrome.runtime.onMessage.addListener((req, _sender, sendResponse) => {\n  if (req.type === 'GET_YT_INFO') {\n    const videoId = getVideoId(location.href);\n    if (!videoId) {\n      sendResponse(null);\n      return true;\n    }\n\n    fetchYTInfo(videoId)\n      .then((info) => sendResponse(info))\n      .catch((err) => {\n        console.error('[YT-EXT] Fetch error', err);\n        sendResponse(null);\n      });\n  }\n  if (req.type === 'SCRAPE_YT_INFO') {\n    sendResponse(scrapeYTInfo());\n  }\n  return true; // keep the messaging channel open\n});\n\n// Listen for requests from background script\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  if (request.action === 'checkMediaSession') {\n    sendResponse(detectMediaSession());\n  }\n});"],
  "mappings": "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",
  "names": []
}
