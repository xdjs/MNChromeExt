{
  "version": 3,
  "sources": ["../src/frontend/popup/ui.js", "../src/frontend/popup/multi-ui.js", "../src/backend/client/cache.js", "../node_modules/src/entity.ts", "../node_modules/src/column.ts", "../node_modules/src/column-builder.ts", "../node_modules/src/table.ts", "../node_modules/src/pg-core/table.ts", "../node_modules/src/pg-core/foreign-keys.ts", "../node_modules/src/tracing-utils.ts", "../node_modules/src/pg-core/unique-constraint.ts", "../node_modules/src/pg-core/utils/array.ts", "../node_modules/src/pg-core/columns/common.ts", "../node_modules/src/pg-core/columns/enum.ts", "../node_modules/src/subquery.ts", "../node_modules/drizzle-orm/version.js", "../node_modules/src/tracing.ts", "../node_modules/src/view-common.ts", "../node_modules/src/sql/sql.ts", "../node_modules/src/pg-core/columns/boolean.ts", "../node_modules/src/pg-core/columns/date.common.ts", "../node_modules/src/pg-core/columns/integer.ts", "../node_modules/src/pg-core/columns/text.ts", "../node_modules/src/pg-core/columns/timestamp.ts", "../node_modules/src/pg-core/columns/uuid.ts", "../src/backend/server/db/schema.ts", "../src/connections/api.js", "../src/backend/browserInfo.js", "../src/backend/client/collabs.js", "../src/connections/fetchArtists.js", "../src/frontend/popup/main.js"],
  "sourcesContent": ["export function renderArtist(a){\r\n\r\n\r\n    const spotifyData = a.spotifyData?.data || a.spotifyData;\r\n    const imageUrl = spotifyData?.images?.[0]?.url;\r\n\r\n\r\n    console.log(a.bio);\r\n    const titleEl = document.getElementById('title');\r\n    const bioEl = document.getElementById('bio');\r\n    const linksTitleEl = document.getElementById('links-title');\r\n    const linksListEl  = document.getElementById('links-list');\r\n    \r\n\r\n    const musicNerdEl = document.getElementById('MN-link');\r\n\r\n        musicNerdEl.textContent = document.createElement('a');\r\n        if (a.id) {\r\n            musicNerdEl.href =  `https://www.musicnerd.xyz/artist/` + a.id;\r\n        }\r\n        else {\r\n            musicNerdEl.href =  `https://www.musicnerd.xyz`;\r\n        }\r\n        musicNerdEl.className = 'flex items-center gap-3 p-2 rounded';\r\n        musicNerdEl.target = '_blank';\r\n        \r\n    \r\n        const MNurl = document.createElement('p');\r\n              MNurl.className = 'text-sm text-gray-500 truncate';\r\n              if (a.id) {\r\n                MNurl.textContent = 'View on MusicNerd.xyz';\r\n              }\r\n              else {\r\n                MNurl.textContent = 'Add them on MusicNerd.xyz';\r\n              }\r\n              \r\n              // Add logo image\r\n        const logoImg = document.createElement('img');\r\n            logoImg.src = 'assets/mn-logo-48.png'; // Use smaller logo\r\n            logoImg.alt = 'MN';\r\n            logoImg.className = 'w-4 h-4 mr-0'; // Small size with margin\r\n            logoImg.style.display = 'inline-block';\r\n            logoImg.style.verticalAlign = 'middle';\r\n\r\n        // Append both to the link\r\n        musicNerdEl.appendChild(logoImg);\r\n        musicNerdEl.appendChild(MNurl);\r\n        \r\n        musicNerdEl.style.textTransform = 'none';\r\n          musicNerdEl.style.backgroundColor = 'rgba(255, 255, 255, 0.1)';\r\n          musicNerdEl.style.borderRadius = '8px';\r\n          musicNerdEl.style.padding = '8px';\r\n          musicNerdEl.style.boxShadow= '0 2px 8px rgba(0, 0, 0, 0.1)';\r\n        \r\n\r\n\r\n    \r\n\r\n    \r\n\r\n    titleEl.textContent = a.name ?? \"Sorry, we don't know this artist!\";\r\n    bioEl.textContent = typeof a.bio === 'string' ? a.bio : (a.bio?.bio ?? a.bio?.text ?? \"No bio Available\");\r\n\r\n      titleEl.appendChild(bioEl);\r\n      titleEl.appendChild(musicNerdEl);\r\n      titleEl.style.backgroundColor = 'rgba(255, 255, 255, 0.5)';\r\n        titleEl.style.borderRadius = '8px';\r\n        titleEl.style.padding = '16px';\r\n        titleEl.style.boxShadow= '0 2px 8px rgba(0, 0, 0, 0.1)';\r\n        titleEl.style.backdropFilter = 'blur(5px)';\r\n\r\n\r\n      bioEl.style.textTransform = 'none';\r\n        bio.style.marginBottom = '4px';\r\n\r\n      \r\n      \r\n    \r\n    if (!a.id) {\r\n        bioEl.textContent = \"\";\r\n    }\r\n\r\n\r\n\r\n\r\n    \r\n\r\n    // Populate links header - hide if no artist ID\r\n    if (linksTitleEl) {\r\n      if (a.id) {\r\n        linksTitleEl.textContent = `${a.name ?? 'Artist'}'s Links`;\r\n        linksTitleEl.style.display = 'block';\r\n        \r\n        \r\n      } else {\r\n        linksTitleEl.style.display = 'none';\r\n      }\r\n    }\r\n\r\n    // Clear previous list items\r\n    if (linksListEl) {\r\n      linksListEl.innerHTML = '';\r\n\r\n\r\n\r\n      if (Array.isArray(a.links) && a.links.length > 0) {\r\n        a.links.forEach(l => {\r\n          const li = document.createElement('li');\r\n          li.style.backdropFilter = 'blur(5px)';\r\n\r\n\r\n\r\n\r\n          // Create clickable link wrapper\r\n          const linkWrapper = document.createElement('a');\r\n          li.appendChild(linkWrapper);\r\n          linkWrapper.href = l.url ?? l.href ?? '#';\r\n          linkWrapper.target = '_blank'; // Open in new tab\r\n          linkWrapper.style.backgroundColor = 'rgba(255, 255, 255, 0.5)';\r\n          linkWrapper.style.borderRadius = '8px';\r\n          linkWrapper.style.padding = '8px';\r\n          linkWrapper.style.boxShadow = '0 2px 8px rgba(0, 0, 0, 0.1)';\r\n          linkWrapper.style.marginBottom = '8px';\r\n          linkWrapper.className = 'flex items-center gap-3 hover:bg-gray-50 p-2 rounded';\r\n          linksListEl.style.gap = '4px'; // Custom spacing\r\n\r\n          linkWrapper.addEventListener('mouseenter', () => {\r\n            linkWrapper.style.transform = 'scale(1.1)';\r\n            linkWrapper.style.transition = 'transform 0.3s ease';\r\n          });\r\n\r\n          linkWrapper.addEventListener('mouseleave', () => {\r\n            linkWrapper.style.transform = 'scale(1.0)';\r\n            linkWrapper.style.transition = 'transform 0.3s ease';\r\n          });\r\n\r\n\r\n\r\n          \r\n          const label = document.createElement('p');\r\n          label.className = 'font-semibold uppercase text-sm text-blue-600 hover:text-blue-800';\r\n          label.textContent = l.label ?? l.title ?? 'Link';\r\n\r\n\r\n\r\n\r\n          const url = document.createElement('p');\r\n          url.className = 'text-sm text-gray-500 truncate';\r\n          if (l.platform_type_list && l.platform_type_list.includes('social')) {\r\n            url.textContent = a[l.label] ?? l.url ?? l.href ?? '';\r\n          }\r\n          else {\r\n            url.textContent = '';\r\n          }\r\n\r\n          const img = document.createElement('img');\r\n          img.src = l.image;\r\n          img.alt = 'Artist Photo'\r\n          img.className = 'w-8 h-8 rounded-full object-cover flex-shrik-0'; \r\n\r\n          const textContainer = document.createElement('div');\r\n          textContainer.className = 'flex-1 min-w-0';\r\n\r\n          textContainer.appendChild(label);\r\n          textContainer.appendChild(url);\r\n\r\n          linkWrapper.appendChild(img);\r\n          linkWrapper.appendChild(textContainer);\r\n          li.appendChild(linkWrapper);\r\n          linksListEl.appendChild(li);\r\n\r\n          \r\n\r\n        });\r\n      } else if (a.id) {\r\n        const li = document.createElement('li');\r\n        li.className = 'text-gray-400 text-sm';\r\n        li.textContent = 'No links available';\r\n        linksListEl.appendChild(li);\r\n      }\r\n      else {\r\n        const li = document.createElement('li');\r\n        li.className = 'text-gray-400 text-sm';\r\n        li.textContent = '';\r\n        linksListEl.appendChild(li);\r\n      }\r\n\r\n    }\r\n\r\n    if (imageUrl) {\r\n      console.log(imageUrl);\r\n      const cardEl = document.getElementById('card');\r\n\r\n      // Add the scale transition\r\n\r\n\r\n      titleEl.style.transition = 'none';\r\n      cardEl.style.transition = 'none';\r\n        titleEl.style.opacity = '0.5';\r\n      linksListEl.style.opacity = '0.5';\r\n        linksListEl.style.transition = 'none';\r\n      cardEl.style.borderRadius = '12px'; // Rounded corners\r\n        cardEl.style.overflow = 'hidden'; // Clips image to rounded shape\r\n      \r\n\r\n      cardEl.style.backgroundImage = `\r\n        radial-gradient(ellipse 100% 100% at center, \r\n        transparent 30%, \r\n        rgba(255,255,255,0.8) 70%,\r\n        rgba(255,255,255,1) 90%\r\n      ),\r\n        url(${imageUrl})\r\n      `;\r\n\r\n    \r\n        cardEl.style.transform = 'scale(.97)';\r\n          cardEl.style.backgroundSize = 'cover';\r\n          cardEl.style.backgroundPosition = 'center';\r\n          cardEl.style.backgroundRepeat = 'no-repeat';\r\n          cardEl.style.minHeight = '580px';\r\n          cardEl.style.transform = 'translateX(-20px)'\r\n\r\n        titleEl.style.transform = 'translateX(-40px)'\r\n\r\n        linksListEl.style.transform = 'translateX(-40px)'\r\n\r\n\r\n      \r\n        \r\n\r\n      \r\n\r\n      setTimeout(() => {\r\n        cardEl.style.transition = 'all 0.4s ease-out';\r\n        cardEl.style.transform = 'scale(1)';\r\n        cardEl.style.opacity = '1';\r\n        cardEl.style.filter = 'grayscale(0%)';\r\n        cardEl.style.transform = 'translateX(0px)'\r\n\r\n        \r\n      }, 50);\r\n\r\n      setTimeout(() => {\r\n        titleEl.style.transition = 'all 0.3s ease-out';\r\n        linksListEl.style.transition = 'all 0.4s ease-out';\r\n        titleEl.style.transform = 'translateX(0px)'\r\n        linksListEl.style.transform = 'translateX(0px)'\r\n        titleEl.style.opacity = '1'\r\n        linksListEl.style.opacity = '1'\r\n      }, 100);\r\n      \r\n\r\n      \r\n    }\r\n    else {\r\n      console.log(\"no image URL detected\");\r\n    }\r\n\r\n\r\n    console.log(titleEl);\r\n    console.log(bioEl);\r\n  }\r\n\r\n\r\n\r\nexport function errorScreen(error) {\r\n  const titleEl = document.getElementById('title');\r\n  const bioEl = document.getElementById('bio');\r\n\r\nswitch (error) {\r\n  case \"noArtist\": {\r\n    titleEl.textContent =\"Sorry, we don't know this artist!\";\r\n  bioEl.textContent = \"If you'd like, you can add them on MusicNerd!\";\r\n\r\n  const musicNerdEl = document.getElementById('MN-link');\r\n  musicNerdEl.textContent = document.createElement('a');\r\n  musicNerdEl.className = 'flex items-center gap-3 hover:bg-gray-50 p-2 rounded';\r\n  musicNerdEl.target = '_blank';\r\n  musicNerdEl.href =  `https://www.musicnerd.xyz`;\r\n  const MNurl = document.createElement('p');\r\n  MNurl.className = 'text-sm text-gray-500 truncate';\r\n  MNurl.textContent = 'Add them on MusicNerd.xyz';\r\n  musicNerdEl.appendChild(MNurl);\r\n  break;\r\n  }\r\n\r\n  case \"noData\": {\r\n    titleEl.textContent =\"We don't see anything playing!\";\r\n    bioEl.textContent = \"Start playing something to get started!\";\r\n    break;\r\n  }\r\n\r\n  case \"notInjected\": {\r\n    titleEl.textContent =\"Music Nerd isn't ready yet.\";\r\n    bioEl.textContent = \"Please refresh this page or restart your browser to get started.\";\r\n    break;\r\n  }\r\n\r\n  case \"default\": {\r\n    titleEl.textContent =\"An error has occured.\";\r\n    break;\r\n  }\r\n\r\n  default: {\r\n    titleEl.textContent =\"An error has occured.\";\r\n    break;\r\n  }\r\n}\r\n\r\nconsole.log(titleEl);\r\nconsole.log(bioEl);\r\n}", "\r\nimport { renderArtist } from \"./ui.js\";\r\n\r\nlet artistList = [];\r\n\r\nlet activeArtistIndex = 0;\r\n\r\nexport function renderArtists(artists) {\r\n  \r\n    console.log('renderArtists called with:', artists);\r\n    artistList = artists;\r\n\r\n  \r\n  // Single artist - use existing UI\r\n  if (artists.length === 1) {\r\n    console.log('Single artist detected, using regular UI');\r\n    hideArtistTabs();\r\n    renderArtist(artists[0]);\r\n    return;\r\n  }\r\n  \r\n  // Multiple artists - show tab interface\r\n  console.log('Multiple artists detected, showing tabs');\r\n  showArtistTabs(artists);\r\n  renderActiveArtist();\r\n}\r\n\r\nfunction showArtistTabs(artists) {\r\n    const tabsContainer = document.getElementById('artist-tabs');\r\n    const tabsList = document.getElementById('tabs-list');\r\n\r\n    tabsList.innerHTML = '';\r\n    artists.forEach((artist, index) => {\r\n        const tab = document.createElement('button');\r\n        tab.className = `px-4 py-2 text-sm font-medium border-b-2 transition-colors ${\r\n            index === activeArtistIndex\r\n                ? 'border-blue-500 text-blue-600 bg-blue-50'\r\n                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\r\n        }`;\r\n\r\n        const displayName = artist.name || 'Unknown artist';\r\n        tab.textContent = artist.isPrimary ? `${displayName} \u2B50` : displayName;\r\n\r\n        tab.addEventListener('click', () => switchToArtist(index));\r\n        tab.style.background = `linear-gradient(to bottom, \r\n        rgba(255,255,255,0) 0%, \r\n        rgba(255,255,255,0.2) 30%, \r\n        rgba(255,255,255,0.8) 80%, \r\n        rgba(255,255,255,1) 100%\r\n        )`;\r\n        tab.style.padding = '8px';\r\n        \r\n        tabsList.appendChild(tab);\r\n        \r\n    });\r\n\r\n    tabsContainer.style.display = 'flex';\r\n    tabsContainer.style.overflowX = 'auto';\r\n    tabsContainer.style.whiteSpace = 'nowrap';\r\n\r\n}\r\n\r\nfunction hideArtistTabs() {\r\n    const tabsContainer = document.getElementById('artist-tabs');\r\n    tabsContainer.style.display = 'none';\r\n}\r\n\r\nfunction switchToArtist(index) {\r\n    if (index === activeArtistIndex || !artistList[index]) {\r\n        return;\r\n    }\r\n\r\n    activeArtistIndex = index;\r\n    updateTabStyles();\r\n    renderActiveArtist();\r\n}\r\n\r\nfunction updateTabStyles() {\r\n    const tabs = document.querySelectorAll('#tabs-list button');\r\n  tabs.forEach((tab, index) => {\r\n    if (index === activeArtistIndex) {\r\n      tab.className = 'px-4 py-2 text-sm font-medium border-b-2 border-blue-500 text-blue-600 bg-blue-50 transition-colors';\r\n    } else {\r\n      tab.className = 'px-4 py-2 text-sm font-medium border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 transition-colors';\r\n    }\r\n    tab.style.background = `linear-gradient(to bottom, \r\n    rgba(255,255,255,0) 0%, \r\n    rgba(255,255,255,0.2) 30%, \r\n    rgba(255,255,255,0.8) 80%, \r\n    rgba(255,255,255,1) 100%\r\n    )`;\r\n    tab.style.padding = '8px';\r\n    \r\n  });\r\n}\r\n\r\nfunction renderActiveArtist() {\r\n    const activeArtist = artistList[activeArtistIndex];\r\n    if (activeArtist) {\r\n      renderArtist(activeArtist);\r\n    }\r\n  }\r\n  \r\n\r\n  document.addEventListener('keydown', (e) => {\r\n    if (artistList.length <= 1) return;\r\n    \r\n    if (e.key === 'ArrowLeft' && activeArtistIndex > 0) {\r\n      switchToArtist(activeArtistIndex - 1);\r\n    } else if (e.key === 'ArrowRight' && activeArtistIndex < artistList.length - 1) {\r\n      switchToArtist(activeArtistIndex + 1);\r\n    }\r\n  });", "const cacheLifeTime = 3*60*1000;\r\n\r\nfunction getCacheKey(identifier, type = 'name') {\r\n    return `${type}:${identifier.toLowerCase()}`;\r\n}\r\n\r\nexport async function cacheArtist(identifier, data, type = 'name') {\r\n    const key = getCacheKey(identifier, type);\r\n    const cacheEntry = {\r\n        data,\r\n        timestamp: Date.now(),\r\n        links: data.links || [],\r\n\r\n    };\r\n\r\n    console.log(`cached artist: ${JSON.stringify(cacheEntry)}`);\r\n\r\n    await chrome.storage.local.set({\r\n        [`cache_${key}`]: cacheEntry\r\n    });\r\n\r\n    \r\n}\r\n\r\nexport async function getCachedArtist(identifier, type = 'name') {\r\n    const key = getCacheKey(identifier, type);\r\n    const result = await chrome.storage.local.get(`cache_${key}`);\r\n    const cached = result[`cache_${key}`];\r\n\r\n    if (!cached) {\r\n        return null;\r\n    }\r\n\r\n    if (Date.now() - cached.timestamp > cacheLifeTime) {\r\n        await chrome.storage.local.remove(`cache_${key}`);\r\n        return null;\r\n    }\r\n\r\n    return cached.data;\r\n}\r\n\r\nexport async function clearCache() {\r\n    const allItems = await chrome.storage.local.get();\r\n    const cacheKeys = Object.keys(allItems).filter(key => key.startsWith('cache_'));\r\n    await chrome.storage.local.remove(cacheKeys);\r\n}\r\n\r\nexport async function cacheVideoResult(videoId, artistData) {\r\n    const key = `video_${videoId}`;\r\n    await chrome.storage.local.set({\r\n        [`cache_${key}`]: {\r\n            data: artistData,\r\n            timestamp: Date.now()\r\n        }\r\n    });\r\n}\r\n\r\nexport async function getCachedVideoResult(videoId) {\r\n    const key = `video_${videoId}`;\r\n    const result = await chrome.storage.local.get(`cache_${key}`);\r\n    const cached = result[`cache_${key}`];\r\n    \r\n\r\n    if (!cached) return null;\r\n\r\n    if (Date.now() - cached.timestamp > cacheLifeTime) {\r\n        await chrome.storage.local.remove(`cache_${key}`);\r\n        return null;\r\n    }\r\n\r\n    return cached.data;\r\n}\r\n\r\n\r\nfunction createMediaSessionKey(mediaSessionData) {\r\n    // Create a stable key from title and artist\r\n    const title = (mediaSessionData.title || '').toLowerCase().trim();\r\n    const artist = (mediaSessionData.channel || '').toLowerCase().trim();\r\n    \r\n    // Simple hash or concatenation\r\n    return `${artist}_${title}`.replace(/[^a-z0-9_]/g, '');\r\n}\r\n\r\nexport async function getCachedMediaSessionResult(mediaSessionData) {\r\n    const key = createMediaSessionKey(mediaSessionData);\r\n    const result = await chrome.storage.local.get(`cache_media_${key}`);\r\n    const cached = result[`cache_media_${key}`];\r\n\r\n    console.log(`grabbing cache with key: cache is  ${cached}`);\r\n\r\n    if (!cached) return null;\r\n\r\n    if (Date.now() - cached.timestamp > cacheLifeTime) {\r\n        await chrome.storage.local.remove(`cache_media_${key}`);\r\n        return null;\r\n    }\r\n\r\n    return cached.data;\r\n}\r\n\r\nexport async function cacheMediaSessionResult(mediaSessionData, artistData) {\r\n    const key = createMediaSessionKey(mediaSessionData)\r\n    await chrome.storage.local.set({\r\n        [`cache_media_${key}`]: {\r\n            data: artistData,\r\n            timestamp: Date.now(),\r\n            originalMediaData: mediaSessionData\r\n        }\r\n    });\r\n    console.log(`caching data: ${key}`)\r\n}", "export const entityKind = Symbol.for('drizzle:entityKind');\nexport const hasOwnEntityKind = Symbol.for('drizzle:hasOwnEntityKind');\n\nexport interface DrizzleEntity {\n\t[entityKind]: string;\n}\n\nexport type DrizzleEntityClass<T> =\n\t& ((abstract new(...args: any[]) => T) | (new(...args: any[]) => T))\n\t& DrizzleEntity;\n\nexport function is<T extends DrizzleEntityClass<any>>(value: any, type: T): value is InstanceType<T> {\n\tif (!value || typeof value !== 'object') {\n\t\treturn false;\n\t}\n\n\tif (value instanceof type) { // eslint-disable-line no-instanceof/no-instanceof\n\t\treturn true;\n\t}\n\n\tif (!Object.prototype.hasOwnProperty.call(type, entityKind)) {\n\t\tthrow new Error(\n\t\t\t`Class \"${\n\t\t\t\ttype.name ?? '<unknown>'\n\t\t\t}\" doesn't look like a Drizzle entity. If this is incorrect and the class is provided by Drizzle, please report this as a bug.`,\n\t\t);\n\t}\n\n\tlet cls = value.constructor;\n\tif (cls) {\n\t\t// Traverse the prototype chain to find the entityKind\n\t\twhile (cls) {\n\t\t\tif (entityKind in cls && cls[entityKind] === type[entityKind]) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tcls = Object.getPrototypeOf(cls);\n\t\t}\n\t}\n\n\treturn false;\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, ColumnDataType } from './column-builder.ts';\nimport { entityKind } from './entity.ts';\nimport type { DriverValueMapper, SQL, SQLWrapper } from './sql/sql.ts';\nimport type { Table } from './table.ts';\nimport type { Update } from './utils.ts';\n\nexport interface ColumnBaseConfig<\n\tTDataType extends ColumnDataType,\n\tTColumnType extends string,\n> extends ColumnBuilderBaseConfig<TDataType, TColumnType> {\n\ttableName: string;\n\tnotNull: boolean;\n\thasDefault: boolean;\n}\n\nexport type ColumnTypeConfig<T extends ColumnBaseConfig<ColumnDataType, string>, TTypeConfig extends object> = T & {\n\tbrand: 'Column';\n\ttableName: T['tableName'];\n\tname: T['name'];\n\tdataType: T['dataType'];\n\tcolumnType: T['columnType'];\n\tdata: T['data'];\n\tdriverParam: T['driverParam'];\n\tnotNull: T['notNull'];\n\thasDefault: T['hasDefault'];\n\tenumValues: T['enumValues'];\n\tbaseColumn: T extends { baseColumn: infer U } ? U : unknown;\n} & TTypeConfig;\n\nexport type ColumnRuntimeConfig<TData, TRuntimeConfig extends object> = ColumnBuilderRuntimeConfig<\n\tTData,\n\tTRuntimeConfig\n>;\n\nexport interface Column<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTRuntimeConfig extends object = object,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTTypeConfig extends object = object,\n> extends DriverValueMapper<T['data'], T['driverParam']>, SQLWrapper {\n\t// SQLWrapper runtime implementation is defined in 'sql/sql.ts'\n}\n/*\n\t`Column` only accepts a full `ColumnConfig` as its generic.\n\tTo infer parts of the config, use `AnyColumn` that accepts a partial config.\n\tSee `GetColumnData` for example usage of inferring.\n*/\nexport abstract class Column<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n> implements DriverValueMapper<T['data'], T['driverParam']>, SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Column';\n\n\tdeclare readonly _: ColumnTypeConfig<T, TTypeConfig>;\n\n\treadonly name: string;\n\treadonly primary: boolean;\n\treadonly notNull: boolean;\n\treadonly default: T['data'] | SQL | undefined;\n\treadonly defaultFn: (() => T['data'] | SQL) | undefined;\n\treadonly onUpdateFn: (() => T['data'] | SQL) | undefined;\n\treadonly hasDefault: boolean;\n\treadonly isUnique: boolean;\n\treadonly uniqueName: string | undefined;\n\treadonly uniqueType: string | undefined;\n\treadonly dataType: T['dataType'];\n\treadonly columnType: T['columnType'];\n\treadonly enumValues: T['enumValues'] = undefined;\n\n\tprotected config: ColumnRuntimeConfig<T['data'], TRuntimeConfig>;\n\n\tconstructor(\n\t\treadonly table: Table,\n\t\tconfig: ColumnRuntimeConfig<T['data'], TRuntimeConfig>,\n\t) {\n\t\tthis.config = config;\n\t\tthis.name = config.name;\n\t\tthis.notNull = config.notNull;\n\t\tthis.default = config.default;\n\t\tthis.defaultFn = config.defaultFn;\n\t\tthis.onUpdateFn = config.onUpdateFn;\n\t\tthis.hasDefault = config.hasDefault;\n\t\tthis.primary = config.primaryKey;\n\t\tthis.isUnique = config.isUnique;\n\t\tthis.uniqueName = config.uniqueName;\n\t\tthis.uniqueType = config.uniqueType;\n\t\tthis.dataType = config.dataType as T['dataType'];\n\t\tthis.columnType = config.columnType;\n\t}\n\n\tabstract getSQLType(): string;\n\n\tmapFromDriverValue(value: unknown): unknown {\n\t\treturn value;\n\t}\n\n\tmapToDriverValue(value: unknown): unknown {\n\t\treturn value;\n\t}\n}\n\nexport type UpdateColConfig<\n\tT extends ColumnBaseConfig<ColumnDataType, string>,\n\tTUpdate extends Partial<ColumnBaseConfig<ColumnDataType, string>>,\n> = Update<T, TUpdate>;\n\nexport type AnyColumn<TPartial extends Partial<ColumnBaseConfig<ColumnDataType, string>> = {}> = Column<\n\tRequired<Update<ColumnBaseConfig<ColumnDataType, string>, TPartial>>\n>;\n\nexport type GetColumnData<TColumn extends Column, TInferMode extends 'query' | 'raw' = 'query'> =\n\t// dprint-ignore\n\tTInferMode extends 'raw' // Raw mode\n\t\t? TColumn['_']['data'] // Just return the underlying type\n\t\t: TColumn['_']['notNull'] extends true // Query mode\n\t\t? TColumn['_']['data'] // Query mode, not null\n\t\t: TColumn['_']['data'] | null; // Query mode, nullable\n\nexport type InferColumnsDataTypes<TColumns extends Record<string, Column>> = {\n\t[Key in keyof TColumns]: GetColumnData<TColumns[Key], 'query'>;\n};\n", "import { entityKind } from '~/entity.ts';\nimport type { Column } from './column.ts';\nimport type { MySqlColumn } from './mysql-core/index.ts';\nimport type { PgColumn } from './pg-core/index.ts';\nimport type { SQL } from './sql/sql.ts';\nimport type { SQLiteColumn } from './sqlite-core/index.ts';\nimport type { Simplify } from './utils.ts';\n\nexport type ColumnDataType =\n\t| 'string'\n\t| 'number'\n\t| 'boolean'\n\t| 'array'\n\t| 'json'\n\t| 'date'\n\t| 'bigint'\n\t| 'custom'\n\t| 'buffer';\n\nexport type Dialect = 'pg' | 'mysql' | 'sqlite' | 'common';\n\nexport interface ColumnBuilderBaseConfig<TDataType extends ColumnDataType, TColumnType extends string> {\n\tname: string;\n\tdataType: TDataType;\n\tcolumnType: TColumnType;\n\tdata: unknown;\n\tdriverParam: unknown;\n\tenumValues: string[] | undefined;\n}\n\nexport type MakeColumnConfig<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTableName extends string,\n> = {\n\tname: T['name'];\n\ttableName: TTableName;\n\tdataType: T['dataType'];\n\tcolumnType: T['columnType'];\n\tdata: T extends { $type: infer U } ? U : T['data'];\n\tdriverParam: T['driverParam'];\n\tnotNull: T extends { notNull: true } ? true : false;\n\thasDefault: T extends { hasDefault: true } ? true : false;\n\tenumValues: T['enumValues'];\n\tbaseColumn: T extends { baseBuilder: infer U extends ColumnBuilderBase } ? BuildColumn<TTableName, U, 'common'>\n\t\t: never;\n} & {};\n\nexport type ColumnBuilderTypeConfig<\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> = Simplify<\n\t& {\n\t\tbrand: 'ColumnBuilder';\n\t\tname: T['name'];\n\t\tdataType: T['dataType'];\n\t\tcolumnType: T['columnType'];\n\t\tdata: T['data'];\n\t\tdriverParam: T['driverParam'];\n\t\tnotNull: T extends { notNull: infer U } ? U : boolean;\n\t\thasDefault: T extends { hasDefault: infer U } ? U : boolean;\n\t\tenumValues: T['enumValues'];\n\t}\n\t& TTypeConfig\n>;\n\nexport type ColumnBuilderRuntimeConfig<TData, TRuntimeConfig extends object = object> = {\n\tname: string;\n\tnotNull: boolean;\n\tdefault: TData | SQL | undefined;\n\tdefaultFn: (() => TData | SQL) | undefined;\n\tonUpdateFn: (() => TData | SQL) | undefined;\n\thasDefault: boolean;\n\tprimaryKey: boolean;\n\tisUnique: boolean;\n\tuniqueName: string | undefined;\n\tuniqueType: string | undefined;\n\tdataType: string;\n\tcolumnType: string;\n} & TRuntimeConfig;\n\nexport interface ColumnBuilderExtraConfig {\n\tprimaryKeyHasDefault?: boolean;\n}\n\nexport type NotNull<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\tnotNull: true;\n\t};\n};\n\nexport type HasDefault<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\thasDefault: true;\n\t};\n};\n\nexport type $Type<T extends ColumnBuilderBase, TType> = T & {\n\t_: {\n\t\t$type: TType;\n\t};\n};\n\nexport interface ColumnBuilderBase<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> {\n\t_: ColumnBuilderTypeConfig<T, TTypeConfig>;\n}\n\n// To understand how to use `ColumnBuilder` and `AnyColumnBuilder`, see `Column` and `AnyColumn` documentation.\nexport abstract class ColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n\tTExtraConfig extends ColumnBuilderExtraConfig = ColumnBuilderExtraConfig,\n> implements ColumnBuilderBase<T, TTypeConfig> {\n\tstatic readonly [entityKind]: string = 'ColumnBuilder';\n\n\tdeclare _: ColumnBuilderTypeConfig<T, TTypeConfig>;\n\n\tprotected config: ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>;\n\n\tconstructor(name: T['name'], dataType: T['dataType'], columnType: T['columnType']) {\n\t\tthis.config = {\n\t\t\tname,\n\t\t\tnotNull: false,\n\t\t\tdefault: undefined,\n\t\t\thasDefault: false,\n\t\t\tprimaryKey: false,\n\t\t\tisUnique: false,\n\t\t\tuniqueName: undefined,\n\t\t\tuniqueType: undefined,\n\t\t\tdataType,\n\t\t\tcolumnType,\n\t\t} as ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>;\n\t}\n\n\t/**\n\t * Changes the data type of the column. Commonly used with `json` columns. Also, useful for branded types.\n\t *\n\t * @example\n\t * ```ts\n\t * const users = pgTable('users', {\n\t * \tid: integer('id').$type<UserId>().primaryKey(),\n\t * \tdetails: json('details').$type<UserDetails>().notNull(),\n\t * });\n\t * ```\n\t */\n\t$type<TType>(): $Type<this, TType> {\n\t\treturn this as $Type<this, TType>;\n\t}\n\n\t/**\n\t * Adds a `not null` clause to the column definition.\n\t *\n\t * Affects the `select` model of the table - columns *without* `not null` will be nullable on select.\n\t */\n\tnotNull(): NotNull<this> {\n\t\tthis.config.notNull = true;\n\t\treturn this as NotNull<this>;\n\t}\n\n\t/**\n\t * Adds a `default <value>` clause to the column definition.\n\t *\n\t * Affects the `insert` model of the table - columns *with* `default` are optional on insert.\n\t *\n\t * If you need to set a dynamic default value, use {@link $defaultFn} instead.\n\t */\n\tdefault(value: (this['_'] extends { $type: infer U } ? U : this['_']['data']) | SQL): HasDefault<this> {\n\t\tthis.config.default = value;\n\t\tthis.config.hasDefault = true;\n\t\treturn this as HasDefault<this>;\n\t}\n\n\t/**\n\t * Adds a dynamic default value to the column.\n\t * The function will be called when the row is inserted, and the returned value will be used as the column value.\n\t *\n\t * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.\n\t */\n\t$defaultFn(\n\t\tfn: () => (this['_'] extends { $type: infer U } ? U : this['_']['data']) | SQL,\n\t): HasDefault<this> {\n\t\tthis.config.defaultFn = fn;\n\t\tthis.config.hasDefault = true;\n\t\treturn this as HasDefault<this>;\n\t}\n\n\t/**\n\t * Alias for {@link $defaultFn}.\n\t */\n\t$default = this.$defaultFn;\n\n\t/**\n\t * Adds a dynamic update value to the column.\n\t * The function will be called when the row is updated, and the returned value will be used as the column value if none is provided.\n\t * If no `default` (or `$defaultFn`) value is provided, the function will be called when the row is inserted as well, and the returned value will be used as the column value.\n\t *\n\t * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.\n\t */\n\t$onUpdateFn(\n\t\tfn: () => (this['_'] extends { $type: infer U } ? U : this['_']['data']) | SQL,\n\t): HasDefault<this> {\n\t\tthis.config.onUpdateFn = fn;\n\t\tthis.config.hasDefault = true;\n\t\treturn this as HasDefault<this>;\n\t}\n\n\t/**\n\t * Alias for {@link $onUpdateFn}.\n\t */\n\t$onUpdate = this.$onUpdateFn;\n\n\t/**\n\t * Adds a `primary key` clause to the column definition. This implicitly makes the column `not null`.\n\t *\n\t * In SQLite, `integer primary key` implicitly makes the column auto-incrementing.\n\t */\n\tprimaryKey(): TExtraConfig['primaryKeyHasDefault'] extends true ? HasDefault<NotNull<this>> : NotNull<this> {\n\t\tthis.config.primaryKey = true;\n\t\tthis.config.notNull = true;\n\t\treturn this as TExtraConfig['primaryKeyHasDefault'] extends true ? HasDefault<NotNull<this>> : NotNull<this>;\n\t}\n}\n\nexport type BuildColumn<\n\tTTableName extends string,\n\tTBuilder extends ColumnBuilderBase,\n\tTDialect extends Dialect,\n> = TDialect extends 'pg' ? PgColumn<MakeColumnConfig<TBuilder['_'], TTableName>>\n\t: TDialect extends 'mysql' ? MySqlColumn<MakeColumnConfig<TBuilder['_'], TTableName>>\n\t: TDialect extends 'sqlite' ? SQLiteColumn<MakeColumnConfig<TBuilder['_'], TTableName>>\n\t: TDialect extends 'common' ? Column<MakeColumnConfig<TBuilder['_'], TTableName>>\n\t: never;\n\nexport type BuildColumns<\n\tTTableName extends string,\n\tTConfigMap extends Record<string, ColumnBuilderBase>,\n\tTDialect extends Dialect,\n> =\n\t& {\n\t\t[Key in keyof TConfigMap]: BuildColumn<TTableName, TConfigMap[Key], TDialect>;\n\t}\n\t& {};\n\nexport type ChangeColumnTableName<TColumn extends Column, TAlias extends string, TDialect extends Dialect> =\n\tTDialect extends 'pg' ? PgColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: TDialect extends 'mysql' ? MySqlColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: TDialect extends 'sqlite' ? SQLiteColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: never;\n", "import type { Column, GetColumnData } from './column.ts';\nimport { entityKind } from './entity.ts';\nimport type { OptionalKeyOnly, RequiredKeyOnly } from './operations.ts';\nimport type { SQLWrapper } from './sql/sql.ts';\nimport type { Simplify, Update } from './utils.ts';\n\nexport interface TableConfig<TColumn extends Column = Column<any>> {\n\tname: string;\n\tschema: string | undefined;\n\tcolumns: Record<string, TColumn>;\n\tdialect: string;\n}\n\nexport type UpdateTableConfig<T extends TableConfig, TUpdate extends Partial<TableConfig>> = Required<\n\tUpdate<T, TUpdate>\n>;\n\n/** @internal */\nexport const TableName = Symbol.for('drizzle:Name');\n\n/** @internal */\nexport const Schema = Symbol.for('drizzle:Schema');\n\n/** @internal */\nexport const Columns = Symbol.for('drizzle:Columns');\n\n/** @internal */\nexport const OriginalName = Symbol.for('drizzle:OriginalName');\n\n/** @internal */\nexport const BaseName = Symbol.for('drizzle:BaseName');\n\n/** @internal */\nexport const IsAlias = Symbol.for('drizzle:IsAlias');\n\n/** @internal */\nexport const ExtraConfigBuilder = Symbol.for('drizzle:ExtraConfigBuilder');\n\nconst IsDrizzleTable = Symbol.for('drizzle:IsDrizzleTable');\n\nexport interface Table<\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tT extends TableConfig = TableConfig,\n> extends SQLWrapper {\n\t// SQLWrapper runtime implementation is defined in 'sql/sql.ts'\n}\n\nexport class Table<T extends TableConfig = TableConfig> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Table';\n\n\tdeclare readonly _: {\n\t\treadonly brand: 'Table';\n\t\treadonly config: T;\n\t\treadonly name: T['name'];\n\t\treadonly schema: T['schema'];\n\t\treadonly columns: T['columns'];\n\t\treadonly inferSelect: InferSelectModel<Table<T>>;\n\t\treadonly inferInsert: InferInsertModel<Table<T>>;\n\t};\n\n\tdeclare readonly $inferSelect: InferSelectModel<Table<T>>;\n\tdeclare readonly $inferInsert: InferInsertModel<Table<T>>;\n\n\t/** @internal */\n\tstatic readonly Symbol = {\n\t\tName: TableName as typeof TableName,\n\t\tSchema: Schema as typeof Schema,\n\t\tOriginalName: OriginalName as typeof OriginalName,\n\t\tColumns: Columns as typeof Columns,\n\t\tBaseName: BaseName as typeof BaseName,\n\t\tIsAlias: IsAlias as typeof IsAlias,\n\t\tExtraConfigBuilder: ExtraConfigBuilder as typeof ExtraConfigBuilder,\n\t};\n\n\t/**\n\t * @internal\n\t * Can be changed if the table is aliased.\n\t */\n\t[TableName]: string;\n\n\t/**\n\t * @internal\n\t * Used to store the original name of the table, before any aliasing.\n\t */\n\t[OriginalName]: string;\n\n\t/** @internal */\n\t[Schema]: string | undefined;\n\n\t/** @internal */\n\t[Columns]!: T['columns'];\n\n\t/**\n\t *  @internal\n\t * Used to store the table name before the transformation via the `tableCreator` functions.\n\t */\n\t[BaseName]: string;\n\n\t/** @internal */\n\t[IsAlias] = false;\n\n\t/** @internal */\n\t[ExtraConfigBuilder]: ((self: any) => Record<string, unknown>) | undefined = undefined;\n\n\t[IsDrizzleTable] = true;\n\n\tconstructor(name: string, schema: string | undefined, baseName: string) {\n\t\tthis[TableName] = this[OriginalName] = name;\n\t\tthis[Schema] = schema;\n\t\tthis[BaseName] = baseName;\n\t}\n}\n\nexport function isTable(table: unknown): table is Table {\n\treturn typeof table === 'object' && table !== null && IsDrizzleTable in table;\n}\n\n/**\n * Any table with a specified boundary.\n *\n * @example\n\t```ts\n\t// Any table with a specific name\n\ttype AnyUsersTable = AnyTable<{ name: 'users' }>;\n\t```\n *\n * To describe any table with any config, simply use `Table` without any type arguments, like this:\n *\n\t```ts\n\tfunction needsTable(table: Table) {\n\t\t...\n\t}\n\t```\n */\nexport type AnyTable<TPartial extends Partial<TableConfig>> = Table<UpdateTableConfig<TableConfig, TPartial>>;\n\nexport function getTableName<T extends Table>(table: T): T['_']['name'] {\n\treturn table[TableName];\n}\n\nexport type MapColumnName<TName extends string, TColumn extends Column, TDBColumNames extends boolean> =\n\tTDBColumNames extends true ? TColumn['_']['name']\n\t\t: TName;\n\nexport type InferModelFromColumns<\n\tTColumns extends Record<string, Column>,\n\tTInferMode extends 'select' | 'insert' = 'select',\n\tTConfig extends { dbColumnNames: boolean } = { dbColumnNames: false },\n> = Simplify<\n\tTInferMode extends 'insert' ? \n\t\t\t& {\n\t\t\t\t[\n\t\t\t\t\tKey in keyof TColumns & string as RequiredKeyOnly<\n\t\t\t\t\t\tMapColumnName<Key, TColumns[Key], TConfig['dbColumnNames']>,\n\t\t\t\t\t\tTColumns[Key]\n\t\t\t\t\t>\n\t\t\t\t]: GetColumnData<TColumns[Key], 'query'>;\n\t\t\t}\n\t\t\t& {\n\t\t\t\t[\n\t\t\t\t\tKey in keyof TColumns & string as OptionalKeyOnly<\n\t\t\t\t\t\tMapColumnName<Key, TColumns[Key], TConfig['dbColumnNames']>,\n\t\t\t\t\t\tTColumns[Key]\n\t\t\t\t\t>\n\t\t\t\t]?: GetColumnData<TColumns[Key], 'query'>;\n\t\t\t}\n\t\t: {\n\t\t\t[\n\t\t\t\tKey in keyof TColumns & string as MapColumnName<\n\t\t\t\t\tKey,\n\t\t\t\t\tTColumns[Key],\n\t\t\t\t\tTConfig['dbColumnNames']\n\t\t\t\t>\n\t\t\t]: GetColumnData<TColumns[Key], 'query'>;\n\t\t}\n>;\n\n/** @deprecated Use one of the alternatives: {@link InferSelectModel} / {@link InferInsertModel}, or `table.$inferSelect` / `table.$inferInsert`\n */\nexport type InferModel<\n\tTTable extends Table,\n\tTInferMode extends 'select' | 'insert' = 'select',\n\tTConfig extends { dbColumnNames: boolean } = { dbColumnNames: false },\n> = InferModelFromColumns<TTable['_']['columns'], TInferMode, TConfig>;\n\nexport type InferSelectModel<\n\tTTable extends Table,\n\tTConfig extends { dbColumnNames: boolean } = { dbColumnNames: false },\n> = InferModelFromColumns<TTable['_']['columns'], 'select', TConfig>;\n\nexport type InferInsertModel<\n\tTTable extends Table,\n\tTConfig extends { dbColumnNames: boolean } = { dbColumnNames: false },\n> = InferModelFromColumns<TTable['_']['columns'], 'insert', TConfig>;\n", "import type { BuildColumns } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport { Table, type TableConfig as TableConfigBase, type UpdateTableConfig } from '~/table.ts';\nimport type { CheckBuilder } from './checks.ts';\nimport type { PgColumn, PgColumnBuilder, PgColumnBuilderBase } from './columns/common.ts';\nimport type { ForeignKey, ForeignKeyBuilder } from './foreign-keys.ts';\nimport type { AnyIndexBuilder } from './indexes.ts';\nimport type { PrimaryKeyBuilder } from './primary-keys.ts';\nimport type { UniqueConstraintBuilder } from './unique-constraint.ts';\n\nexport type PgTableExtraConfig = Record<\n\tstring,\n\t| AnyIndexBuilder\n\t| CheckBuilder\n\t| ForeignKeyBuilder\n\t| PrimaryKeyBuilder\n\t| UniqueConstraintBuilder\n>;\n\nexport type TableConfig = TableConfigBase<PgColumn>;\n\n/** @internal */\nexport const InlineForeignKeys = Symbol.for('drizzle:PgInlineForeignKeys');\n\nexport class PgTable<T extends TableConfig = TableConfig> extends Table<T> {\n\tstatic readonly [entityKind]: string = 'PgTable';\n\n\t/** @internal */\n\tstatic override readonly Symbol = Object.assign({}, Table.Symbol, {\n\t\tInlineForeignKeys: InlineForeignKeys as typeof InlineForeignKeys,\n\t});\n\n\t/**@internal */\n\t[InlineForeignKeys]: ForeignKey[] = [];\n\n\t/** @internal */\n\toverride [Table.Symbol.ExtraConfigBuilder]: ((self: Record<string, PgColumn>) => PgTableExtraConfig) | undefined =\n\t\tundefined;\n}\n\nexport type AnyPgTable<TPartial extends Partial<TableConfig> = {}> = PgTable<UpdateTableConfig<TableConfig, TPartial>>;\n\nexport type PgTableWithColumns<T extends TableConfig> =\n\t& PgTable<T>\n\t& {\n\t\t[Key in keyof T['columns']]: T['columns'][Key];\n\t};\n\n/** @internal */\nexport function pgTableWithSchema<\n\tTTableName extends string,\n\tTSchemaName extends string | undefined,\n\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n>(\n\tname: TTableName,\n\tcolumns: TColumnsMap,\n\textraConfig: ((self: BuildColumns<TTableName, TColumnsMap, 'pg'>) => PgTableExtraConfig) | undefined,\n\tschema: TSchemaName,\n\tbaseName = name,\n): PgTableWithColumns<{\n\tname: TTableName;\n\tschema: TSchemaName;\n\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\tdialect: 'pg';\n}> {\n\tconst rawTable = new PgTable<{\n\t\tname: TTableName;\n\t\tschema: TSchemaName;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>(name, schema, baseName);\n\n\tconst builtColumns = Object.fromEntries(\n\t\tObject.entries(columns).map(([name, colBuilderBase]) => {\n\t\t\tconst colBuilder = colBuilderBase as PgColumnBuilder;\n\t\t\tconst column = colBuilder.build(rawTable);\n\t\t\trawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n\t\t\treturn [name, column];\n\t\t}),\n\t) as unknown as BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\n\tconst table = Object.assign(rawTable, builtColumns);\n\n\ttable[Table.Symbol.Columns] = builtColumns;\n\n\tif (extraConfig) {\n\t\ttable[PgTable.Symbol.ExtraConfigBuilder] = extraConfig as any;\n\t}\n\n\treturn table;\n}\n\nexport interface PgTableFn<TSchema extends string | undefined = undefined> {\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: TColumnsMap,\n\t\textraConfig?: (self: BuildColumns<TTableName, TColumnsMap, 'pg'>) => PgTableExtraConfig,\n\t): PgTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>;\n}\n\nexport const pgTable: PgTableFn = (name, columns, extraConfig) => {\n\treturn pgTableWithSchema(name, columns, extraConfig, undefined);\n};\n\nexport function pgTableCreator(customizeTableName: (name: string) => string): PgTableFn {\n\treturn (name, columns, extraConfig) => {\n\t\treturn pgTableWithSchema(customizeTableName(name) as typeof name, columns, extraConfig, undefined, name);\n\t};\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { AnyPgColumn, PgColumn } from './columns/index.ts';\nimport { PgTable } from './table.ts';\n\nexport type UpdateDeleteAction = 'cascade' | 'restrict' | 'no action' | 'set null' | 'set default';\n\nexport type Reference = () => {\n\treadonly name?: string;\n\treadonly columns: PgColumn[];\n\treadonly foreignTable: PgTable;\n\treadonly foreignColumns: PgColumn[];\n};\n\nexport class ForeignKeyBuilder {\n\tstatic readonly [entityKind]: string = 'PgForeignKeyBuilder';\n\n\t/** @internal */\n\treference: Reference;\n\n\t/** @internal */\n\t_onUpdate: UpdateDeleteAction | undefined = 'no action';\n\n\t/** @internal */\n\t_onDelete: UpdateDeleteAction | undefined = 'no action';\n\n\tconstructor(\n\t\tconfig: () => {\n\t\t\tname?: string;\n\t\t\tcolumns: PgColumn[];\n\t\t\tforeignColumns: PgColumn[];\n\t\t},\n\t\tactions?: {\n\t\t\tonUpdate?: UpdateDeleteAction;\n\t\t\tonDelete?: UpdateDeleteAction;\n\t\t} | undefined,\n\t) {\n\t\tthis.reference = () => {\n\t\t\tconst { name, columns, foreignColumns } = config();\n\t\t\treturn { name, columns, foreignTable: foreignColumns[0]!.table as PgTable, foreignColumns };\n\t\t};\n\t\tif (actions) {\n\t\t\tthis._onUpdate = actions.onUpdate;\n\t\t\tthis._onDelete = actions.onDelete;\n\t\t}\n\t}\n\n\tonUpdate(action: UpdateDeleteAction): this {\n\t\tthis._onUpdate = action === undefined ? 'no action' : action;\n\t\treturn this;\n\t}\n\n\tonDelete(action: UpdateDeleteAction): this {\n\t\tthis._onDelete = action === undefined ? 'no action' : action;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: PgTable): ForeignKey {\n\t\treturn new ForeignKey(table, this);\n\t}\n}\n\nexport type AnyForeignKeyBuilder = ForeignKeyBuilder;\n\nexport class ForeignKey {\n\tstatic readonly [entityKind]: string = 'PgForeignKey';\n\n\treadonly reference: Reference;\n\treadonly onUpdate: UpdateDeleteAction | undefined;\n\treadonly onDelete: UpdateDeleteAction | undefined;\n\n\tconstructor(readonly table: PgTable, builder: ForeignKeyBuilder) {\n\t\tthis.reference = builder.reference;\n\t\tthis.onUpdate = builder._onUpdate;\n\t\tthis.onDelete = builder._onDelete;\n\t}\n\n\tgetName(): string {\n\t\tconst { name, columns, foreignColumns } = this.reference();\n\t\tconst columnNames = columns.map((column) => column.name);\n\t\tconst foreignColumnNames = foreignColumns.map((column) => column.name);\n\t\tconst chunks = [\n\t\t\tthis.table[PgTable.Symbol.Name],\n\t\t\t...columnNames,\n\t\t\tforeignColumns[0]!.table[PgTable.Symbol.Name],\n\t\t\t...foreignColumnNames,\n\t\t];\n\t\treturn name ?? `${chunks.join('_')}_fk`;\n\t}\n}\n\ntype ColumnsWithTable<\n\tTTableName extends string,\n\tTColumns extends PgColumn[],\n> = { [Key in keyof TColumns]: AnyPgColumn<{ tableName: TTableName }> };\n\nexport function foreignKey<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends [AnyPgColumn<{ tableName: TTableName }>, ...AnyPgColumn<{ tableName: TTableName }>[]],\n>(\n\tconfig: {\n\t\tname?: string;\n\t\tcolumns: TColumns;\n\t\tforeignColumns: ColumnsWithTable<TForeignTableName, TColumns>;\n\t},\n): ForeignKeyBuilder {\n\tfunction mappedConfig() {\n\t\tconst { name, columns, foreignColumns } = config;\n\t\treturn {\n\t\t\tname,\n\t\t\tcolumns,\n\t\t\tforeignColumns,\n\t\t};\n\t}\n\n\treturn new ForeignKeyBuilder(mappedConfig);\n}\n", "export function iife<T extends unknown[], U>(fn: (...args: T) => U, ...args: T): U {\n\treturn fn(...args);\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { PgColumn } from './columns/index.ts';\nimport { PgTable } from './table.ts';\n\nexport function unique(name?: string): UniqueOnConstraintBuilder {\n\treturn new UniqueOnConstraintBuilder(name);\n}\n\nexport function uniqueKeyName(table: PgTable, columns: string[]) {\n\treturn `${table[PgTable.Symbol.Name]}_${columns.join('_')}_unique`;\n}\n\nexport class UniqueConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'PgUniqueConstraintBuilder';\n\n\t/** @internal */\n\tcolumns: PgColumn[];\n\t/** @internal */\n\tnullsNotDistinctConfig = false;\n\n\tconstructor(\n\t\tcolumns: PgColumn[],\n\t\tprivate name?: string,\n\t) {\n\t\tthis.columns = columns;\n\t}\n\n\tnullsNotDistinct() {\n\t\tthis.nullsNotDistinctConfig = true;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: PgTable): UniqueConstraint {\n\t\treturn new UniqueConstraint(table, this.columns, this.nullsNotDistinctConfig, this.name);\n\t}\n}\n\nexport class UniqueOnConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'PgUniqueOnConstraintBuilder';\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tname?: string,\n\t) {\n\t\tthis.name = name;\n\t}\n\n\ton(...columns: [PgColumn, ...PgColumn[]]) {\n\t\treturn new UniqueConstraintBuilder(columns, this.name);\n\t}\n}\n\nexport class UniqueConstraint {\n\tstatic readonly [entityKind]: string = 'PgUniqueConstraint';\n\n\treadonly columns: PgColumn[];\n\treadonly name?: string;\n\treadonly nullsNotDistinct: boolean = false;\n\n\tconstructor(readonly table: PgTable, columns: PgColumn[], nullsNotDistinct: boolean, name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name ?? uniqueKeyName(this.table, this.columns.map((column) => column.name));\n\t\tthis.nullsNotDistinct = nullsNotDistinct;\n\t}\n\n\tgetName() {\n\t\treturn this.name;\n\t}\n}\n", "function parsePgArrayValue(arrayString: string, startFrom: number, inQuotes: boolean): [string, number] {\n\tfor (let i = startFrom; i < arrayString.length; i++) {\n\t\tconst char = arrayString[i];\n\n\t\tif (char === '\\\\') {\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === '\"') {\n\t\t\treturn [arrayString.slice(startFrom, i).replace(/\\\\/g, ''), i + 1];\n\t\t}\n\n\t\tif (inQuotes) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === ',' || char === '}') {\n\t\t\treturn [arrayString.slice(startFrom, i).replace(/\\\\/g, ''), i];\n\t\t}\n\t}\n\n\treturn [arrayString.slice(startFrom).replace(/\\\\/g, ''), arrayString.length];\n}\n\nexport function parsePgNestedArray(arrayString: string, startFrom = 0): [any[], number] {\n\tconst result: any[] = [];\n\tlet i = startFrom;\n\tlet lastCharIsComma = false;\n\n\twhile (i < arrayString.length) {\n\t\tconst char = arrayString[i];\n\n\t\tif (char === ',') {\n\t\t\tif (lastCharIsComma || i === startFrom) {\n\t\t\t\tresult.push('');\n\t\t\t}\n\t\t\tlastCharIsComma = true;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\n\t\tlastCharIsComma = false;\n\n\t\tif (char === '\\\\') {\n\t\t\ti += 2;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === '\"') {\n\t\t\tconst [value, startFrom] = parsePgArrayValue(arrayString, i + 1, true);\n\t\t\tresult.push(value);\n\t\t\ti = startFrom;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === '}') {\n\t\t\treturn [result, i + 1];\n\t\t}\n\n\t\tif (char === '{') {\n\t\t\tconst [value, startFrom] = parsePgNestedArray(arrayString, i + 1);\n\t\t\tresult.push(value);\n\t\t\ti = startFrom;\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst [value, newStartFrom] = parsePgArrayValue(arrayString, i, false);\n\t\tresult.push(value);\n\t\ti = newStartFrom;\n\t}\n\n\treturn [result, i];\n}\n\nexport function parsePgArray(arrayString: string): any[] {\n\tconst [result] = parsePgNestedArray(arrayString, 1);\n\treturn result;\n}\n\nexport function makePgArray(array: any[]): string {\n\treturn `{${\n\t\tarray.map((item) => {\n\t\t\tif (Array.isArray(item)) {\n\t\t\t\treturn makePgArray(item);\n\t\t\t}\n\n\t\t\tif (typeof item === 'string') {\n\t\t\t\treturn `\"${item.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"')}\"`;\n\t\t\t}\n\n\t\t\treturn `${item}`;\n\t\t}).join(',')\n\t}}`;\n}\n", "import type {\n\tColumnBuilderBase,\n\tColumnBuilderBaseConfig,\n\tColumnBuilderExtraConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tMakeColumnConfig,\n} from '~/column-builder.ts';\nimport { ColumnBuilder } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { Column } from '~/column.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport type { Update } from '~/utils.ts';\n\nimport type { ForeignKey, UpdateDeleteAction } from '~/pg-core/foreign-keys.ts';\nimport { ForeignKeyBuilder } from '~/pg-core/foreign-keys.ts';\nimport type { AnyPgTable, PgTable } from '~/pg-core/table.ts';\nimport { iife } from '~/tracing-utils.ts';\nimport { uniqueKeyName } from '../unique-constraint.ts';\nimport { makePgArray, parsePgArray } from '../utils/array.ts';\n\nexport interface ReferenceConfig {\n\tref: () => PgColumn;\n\tactions: {\n\t\tonUpdate?: UpdateDeleteAction;\n\t\tonDelete?: UpdateDeleteAction;\n\t};\n}\n\nexport interface PgColumnBuilderBase<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> extends ColumnBuilderBase<T, TTypeConfig & { dialect: 'pg' }> {}\n\nexport abstract class PgColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n\tTExtraConfig extends ColumnBuilderExtraConfig = ColumnBuilderExtraConfig,\n> extends ColumnBuilder<T, TRuntimeConfig, TTypeConfig & { dialect: 'pg' }, TExtraConfig>\n\timplements PgColumnBuilderBase<T, TTypeConfig>\n{\n\tprivate foreignKeyConfigs: ReferenceConfig[] = [];\n\n\tstatic readonly [entityKind]: string = 'PgColumnBuilder';\n\n\tarray(size?: number): PgArrayBuilder<\n\t\t& {\n\t\t\tname: T['name'];\n\t\t\tdataType: 'array';\n\t\t\tcolumnType: 'PgArray';\n\t\t\tdata: T['data'][];\n\t\t\tdriverParam: T['driverParam'][] | string;\n\t\t\tenumValues: T['enumValues'];\n\t\t}\n\t\t& (T extends { notNull: true } ? { notNull: true } : {})\n\t\t& (T extends { hasDefault: true } ? { hasDefault: true } : {}),\n\t\tT\n\t> {\n\t\treturn new PgArrayBuilder(this.config.name, this as PgColumnBuilder<any, any>, size);\n\t}\n\n\treferences(\n\t\tref: ReferenceConfig['ref'],\n\t\tactions: ReferenceConfig['actions'] = {},\n\t): this {\n\t\tthis.foreignKeyConfigs.push({ ref, actions });\n\t\treturn this;\n\t}\n\n\tunique(\n\t\tname?: string,\n\t\tconfig?: { nulls: 'distinct' | 'not distinct' },\n\t): this {\n\t\tthis.config.isUnique = true;\n\t\tthis.config.uniqueName = name;\n\t\tthis.config.uniqueType = config?.nulls;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuildForeignKeys(column: PgColumn, table: PgTable): ForeignKey[] {\n\t\treturn this.foreignKeyConfigs.map(({ ref, actions }) => {\n\t\t\treturn iife(\n\t\t\t\t(ref, actions) => {\n\t\t\t\t\tconst builder = new ForeignKeyBuilder(() => {\n\t\t\t\t\t\tconst foreignColumn = ref();\n\t\t\t\t\t\treturn { columns: [column], foreignColumns: [foreignColumn] };\n\t\t\t\t\t});\n\t\t\t\t\tif (actions.onUpdate) {\n\t\t\t\t\t\tbuilder.onUpdate(actions.onUpdate);\n\t\t\t\t\t}\n\t\t\t\t\tif (actions.onDelete) {\n\t\t\t\t\t\tbuilder.onDelete(actions.onDelete);\n\t\t\t\t\t}\n\t\t\t\t\treturn builder.build(table);\n\t\t\t\t},\n\t\t\t\tref,\n\t\t\t\tactions,\n\t\t\t);\n\t\t});\n\t}\n\n\t/** @internal */\n\tabstract build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgColumn<MakeColumnConfig<T, TTableName>>;\n}\n\n// To understand how to use `PgColumn` and `PgColumn`, see `Column` and `AnyColumn` documentation.\nexport abstract class PgColumn<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = {},\n\tTTypeConfig extends object = {},\n> extends Column<T, TRuntimeConfig, TTypeConfig & { dialect: 'pg' }> {\n\tstatic readonly [entityKind]: string = 'PgColumn';\n\n\tconstructor(\n\t\toverride readonly table: PgTable,\n\t\tconfig: ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>,\n\t) {\n\t\tif (!config.uniqueName) {\n\t\t\tconfig.uniqueName = uniqueKeyName(table, [config.name]);\n\t\t}\n\t\tsuper(table, config);\n\t}\n}\n\nexport type AnyPgColumn<TPartial extends Partial<ColumnBaseConfig<ColumnDataType, string>> = {}> = PgColumn<\n\tRequired<Update<ColumnBaseConfig<ColumnDataType, string>, TPartial>>\n>;\n\nexport class PgArrayBuilder<\n\tT extends ColumnBuilderBaseConfig<'array', 'PgArray'>,\n\tTBase extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n> extends PgColumnBuilder<\n\tT,\n\t{\n\t\tbaseBuilder: PgColumnBuilder<TBase>;\n\t\tsize: number | undefined;\n\t},\n\t{\n\t\tbaseBuilder: PgColumnBuilder<TBase>;\n\t}\n> {\n\tstatic override readonly [entityKind] = 'PgArrayBuilder';\n\n\tconstructor(\n\t\tname: string,\n\t\tbaseBuilder: PgArrayBuilder<T, TBase>['config']['baseBuilder'],\n\t\tsize: number | undefined,\n\t) {\n\t\tsuper(name, 'array', 'PgArray');\n\t\tthis.config.baseBuilder = baseBuilder;\n\t\tthis.config.size = size;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgArray<MakeColumnConfig<T, TTableName>, TBase> {\n\t\tconst baseColumn = this.config.baseBuilder.build(table);\n\t\treturn new PgArray<MakeColumnConfig<T, TTableName>, TBase>(\n\t\t\ttable as AnyPgTable<{ name: MakeColumnConfig<T, TTableName>['tableName'] }>,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t\tbaseColumn,\n\t\t);\n\t}\n}\n\nexport class PgArray<\n\tT extends ColumnBaseConfig<'array', 'PgArray'>,\n\tTBase extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n> extends PgColumn<T> {\n\treadonly size: number | undefined;\n\n\tstatic readonly [entityKind]: string = 'PgArray';\n\n\tconstructor(\n\t\ttable: AnyPgTable<{ name: T['tableName'] }>,\n\t\tconfig: PgArrayBuilder<T, TBase>['config'],\n\t\treadonly baseColumn: PgColumn,\n\t\treadonly range?: [number | undefined, number | undefined],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.size = config.size;\n\t}\n\n\tgetSQLType(): string {\n\t\treturn `${this.baseColumn.getSQLType()}[${typeof this.size === 'number' ? this.size : ''}]`;\n\t}\n\n\toverride mapFromDriverValue(value: unknown[] | string): T['data'] {\n\t\tif (typeof value === 'string') {\n\t\t\t// Thank you node-postgres for not parsing enum arrays\n\t\t\tvalue = parsePgArray(value);\n\t\t}\n\t\treturn value.map((v) => this.baseColumn.mapFromDriverValue(v));\n\t}\n\n\toverride mapToDriverValue(value: unknown[], isNestedArray = false): unknown[] | string {\n\t\tconst a = value.map((v) =>\n\t\t\tv === null\n\t\t\t\t? null\n\t\t\t\t: is(this.baseColumn, PgArray)\n\t\t\t\t? this.baseColumn.mapToDriverValue(v as unknown[], true)\n\t\t\t\t: this.baseColumn.mapToDriverValue(v)\n\t\t);\n\t\tif (isNestedArray) return a;\n\t\treturn makePgArray(a);\n\t}\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport type { Writable } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgEnumColumnBuilderInitial<TName extends string, TValues extends [string, ...string[]]> =\n\tPgEnumColumnBuilder<{\n\t\tname: TName;\n\t\tdataType: 'string';\n\t\tcolumnType: 'PgEnumColumn';\n\t\tdata: TValues[number];\n\t\tenumValues: TValues;\n\t\tdriverParam: string;\n\t}>;\n\nconst isPgEnumSym = Symbol.for('drizzle:isPgEnum');\nexport interface PgEnum<TValues extends [string, ...string[]]> {\n\t<TName extends string>(name: TName): PgEnumColumnBuilderInitial<TName, TValues>;\n\n\treadonly enumName: string;\n\treadonly enumValues: TValues;\n\treadonly schema: string | undefined;\n\t/** @internal */\n\t[isPgEnumSym]: true;\n}\n\nexport function isPgEnum(obj: unknown): obj is PgEnum<[string, ...string[]]> {\n\treturn !!obj && typeof obj === 'function' && isPgEnumSym in obj && obj[isPgEnumSym] === true;\n}\n\nexport class PgEnumColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<'string', 'PgEnumColumn'> & { enumValues: [string, ...string[]] },\n> extends PgColumnBuilder<T, { enum: PgEnum<T['enumValues']> }> {\n\tstatic readonly [entityKind]: string = 'PgEnumColumnBuilder';\n\n\tconstructor(name: string, enumInstance: PgEnum<T['enumValues']>) {\n\t\tsuper(name, 'string', 'PgEnumColumn');\n\t\tthis.config.enum = enumInstance;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgEnumColumn<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgEnumColumn<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgEnumColumn<T extends ColumnBaseConfig<'string', 'PgEnumColumn'> & { enumValues: [string, ...string[]] }>\n\textends PgColumn<T, { enum: PgEnum<T['enumValues']> }>\n{\n\tstatic readonly [entityKind]: string = 'PgEnumColumn';\n\n\treadonly enum = this.config.enum;\n\toverride readonly enumValues = this.config.enum.enumValues;\n\n\tconstructor(\n\t\ttable: AnyPgTable<{ name: T['tableName'] }>,\n\t\tconfig: PgEnumColumnBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.enum = config.enum;\n\t}\n\n\tgetSQLType(): string {\n\t\treturn this.enum.enumName;\n\t}\n}\n\n// Gratitude to zod for the enum function types\nexport function pgEnum<U extends string, T extends Readonly<[U, ...U[]]>>(\n\tenumName: string,\n\tvalues: T | Writable<T>,\n): PgEnum<Writable<T>> {\n\treturn pgEnumWithSchema(enumName, values, undefined);\n}\n\n/** @internal */\nexport function pgEnumWithSchema<U extends string, T extends Readonly<[U, ...U[]]>>(\n\tenumName: string,\n\tvalues: T | Writable<T>,\n\tschema?: string,\n): PgEnum<Writable<T>> {\n\tconst enumInstance: PgEnum<Writable<T>> = Object.assign(\n\t\t<TName extends string>(name: TName): PgEnumColumnBuilderInitial<TName, Writable<T>> =>\n\t\t\tnew PgEnumColumnBuilder(name, enumInstance),\n\t\t{\n\t\t\tenumName,\n\t\t\tenumValues: values,\n\t\t\tschema,\n\t\t\t[isPgEnumSym]: true,\n\t\t} as const,\n\t);\n\n\treturn enumInstance;\n}\n", "import { entityKind } from './entity.ts';\nimport type { SQL, SQLWrapper } from './sql/sql.ts';\n\nexport interface Subquery<\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTAlias extends string = string,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTSelectedFields extends Record<string, unknown> = Record<string, unknown>,\n> extends SQLWrapper {\n\t// SQLWrapper runtime implementation is defined in 'sql/sql.ts'\n}\nexport class Subquery<\n\tTAlias extends string = string,\n\tTSelectedFields extends Record<string, unknown> = Record<string, unknown>,\n> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Subquery';\n\n\tdeclare _: {\n\t\tbrand: 'Subquery';\n\t\tsql: SQL;\n\t\tselectedFields: TSelectedFields;\n\t\talias: TAlias;\n\t\tisWith: boolean;\n\t};\n\n\tconstructor(sql: SQL, selection: Record<string, unknown>, alias: string, isWith = false) {\n\t\tthis._ = {\n\t\t\tbrand: 'Subquery',\n\t\t\tsql,\n\t\t\tselectedFields: selection as TSelectedFields,\n\t\t\talias: alias as TAlias,\n\t\t\tisWith,\n\t\t};\n\t}\n\n\t// getSQL(): SQL<unknown> {\n\t// \treturn new SQL([this]);\n\t// }\n}\n\nexport class WithSubquery<\n\tTAlias extends string = string,\n\tTSelection extends Record<string, unknown> = Record<string, unknown>,\n> extends Subquery<TAlias, TSelection> {\n\tstatic readonly [entityKind]: string = 'WithSubquery';\n}\n", "// package.json\r\nvar version = \"0.30.10\";\r\n\r\n// src/version.ts\r\nvar compatibilityVersion = 6;\r\nexport {\r\n  compatibilityVersion,\r\n  version as npmVersion\r\n};\r\n", "import type { Span, Tracer } from '@opentelemetry/api';\nimport { iife } from '~/tracing-utils.ts';\nimport { npmVersion } from '~/version.ts';\n\nlet otel: typeof import('@opentelemetry/api') | undefined;\nlet rawTracer: Tracer | undefined;\n// try {\n// \totel = await import('@opentelemetry/api');\n// } catch (err: any) {\n// \tif (err.code !== 'MODULE_NOT_FOUND' && err.code !== 'ERR_MODULE_NOT_FOUND') {\n// \t\tthrow err;\n// \t}\n// }\n\ntype SpanName =\n\t| 'drizzle.operation'\n\t| 'drizzle.prepareQuery'\n\t| 'drizzle.buildSQL'\n\t| 'drizzle.execute'\n\t| 'drizzle.driver.execute'\n\t| 'drizzle.mapResponse';\n\n/** @internal */\nexport const tracer = {\n\tstartActiveSpan<F extends (span?: Span) => unknown>(name: SpanName, fn: F): ReturnType<F> {\n\t\tif (!otel) {\n\t\t\treturn fn() as ReturnType<F>;\n\t\t}\n\n\t\tif (!rawTracer) {\n\t\t\trawTracer = otel.trace.getTracer('drizzle-orm', npmVersion);\n\t\t}\n\n\t\treturn iife(\n\t\t\t(otel, rawTracer) =>\n\t\t\t\trawTracer.startActiveSpan(\n\t\t\t\t\tname,\n\t\t\t\t\t((span: Span) => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\treturn fn(span);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tspan.setStatus({\n\t\t\t\t\t\t\t\tcode: otel.SpanStatusCode.ERROR,\n\t\t\t\t\t\t\t\tmessage: e instanceof Error ? e.message : 'Unknown error', // eslint-disable-line no-instanceof/no-instanceof\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tspan.end();\n\t\t\t\t\t\t}\n\t\t\t\t\t}) as F,\n\t\t\t\t),\n\t\t\totel,\n\t\t\trawTracer,\n\t\t);\n\t},\n};\n", "export const ViewBaseConfig = Symbol.for('drizzle:ViewBaseConfig');\n", "import { entityKind, is } from '~/entity.ts';\nimport type { SelectedFields } from '~/operations.ts';\nimport { isPgEnum } from '~/pg-core/columns/enum.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { tracer } from '~/tracing.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type { AnyColumn } from '../column.ts';\nimport { Column } from '../column.ts';\nimport { Table } from '../table.ts';\n\n/**\n * This class is used to indicate a primitive param value that is used in `sql` tag.\n * It is only used on type level and is never instantiated at runtime.\n * If you see a value of this type in the code, its runtime value is actually the primitive param value.\n */\nexport class FakePrimitiveParam {\n\tstatic readonly [entityKind]: string = 'FakePrimitiveParam';\n}\n\nexport type Chunk =\n\t| string\n\t| Table\n\t| View\n\t| AnyColumn\n\t| Name\n\t| Param\n\t| Placeholder\n\t| SQL;\n\nexport interface BuildQueryConfig {\n\tescapeName(name: string): string;\n\tescapeParam(num: number, value: unknown): string;\n\tescapeString(str: string): string;\n\tprepareTyping?: (encoder: DriverValueEncoder<unknown, unknown>) => QueryTypingsValue;\n\tparamStartIndex?: { value: number };\n\tinlineParams?: boolean;\n}\n\nexport type QueryTypingsValue = 'json' | 'decimal' | 'time' | 'timestamp' | 'uuid' | 'date' | 'none';\n\nexport interface Query {\n\tsql: string;\n\tparams: unknown[];\n}\n\nexport interface QueryWithTypings extends Query {\n\ttypings?: QueryTypingsValue[];\n}\n\n/**\n * Any value that implements the `getSQL` method. The implementations include:\n * - `Table`\n * - `Column`\n * - `View`\n * - `Subquery`\n * - `SQL`\n * - `SQL.Aliased`\n * - `Placeholder`\n * - `Param`\n */\nexport interface SQLWrapper {\n\tgetSQL(): SQL;\n}\n\nexport function isSQLWrapper(value: unknown): value is SQLWrapper {\n\treturn value !== null && value !== undefined && typeof (value as any).getSQL === 'function';\n}\n\nfunction mergeQueries(queries: QueryWithTypings[]): QueryWithTypings {\n\tconst result: QueryWithTypings = { sql: '', params: [] };\n\tfor (const query of queries) {\n\t\tresult.sql += query.sql;\n\t\tresult.params.push(...query.params);\n\t\tif (query.typings?.length) {\n\t\t\tif (!result.typings) {\n\t\t\t\tresult.typings = [];\n\t\t\t}\n\t\t\tresult.typings.push(...query.typings);\n\t\t}\n\t}\n\treturn result;\n}\n\nexport class StringChunk implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'StringChunk';\n\n\treadonly value: string[];\n\n\tconstructor(value: string | string[]) {\n\t\tthis.value = Array.isArray(value) ? value : [value];\n\t}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\nexport class SQL<T = unknown> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'SQL';\n\n\tdeclare _: {\n\t\tbrand: 'SQL';\n\t\ttype: T;\n\t};\n\n\t/** @internal */\n\tdecoder: DriverValueDecoder<T, any> = noopDecoder;\n\tprivate shouldInlineParams = false;\n\n\tconstructor(readonly queryChunks: SQLChunk[]) {}\n\n\tappend(query: SQL): this {\n\t\tthis.queryChunks.push(...query.queryChunks);\n\t\treturn this;\n\t}\n\n\ttoQuery(config: BuildQueryConfig): QueryWithTypings {\n\t\treturn tracer.startActiveSpan('drizzle.buildSQL', (span) => {\n\t\t\tconst query = this.buildQueryFromSourceParams(this.queryChunks, config);\n\t\t\tspan?.setAttributes({\n\t\t\t\t'drizzle.query.text': query.sql,\n\t\t\t\t'drizzle.query.params': JSON.stringify(query.params),\n\t\t\t});\n\t\t\treturn query;\n\t\t});\n\t}\n\n\tbuildQueryFromSourceParams(chunks: SQLChunk[], _config: BuildQueryConfig): Query {\n\t\tconst config = Object.assign({}, _config, {\n\t\t\tinlineParams: _config.inlineParams || this.shouldInlineParams,\n\t\t\tparamStartIndex: _config.paramStartIndex || { value: 0 },\n\t\t});\n\n\t\tconst {\n\t\t\tescapeName,\n\t\t\tescapeParam,\n\t\t\tprepareTyping,\n\t\t\tinlineParams,\n\t\t\tparamStartIndex,\n\t\t} = config;\n\n\t\treturn mergeQueries(chunks.map((chunk): QueryWithTypings => {\n\t\t\tif (is(chunk, StringChunk)) {\n\t\t\t\treturn { sql: chunk.value.join(''), params: [] };\n\t\t\t}\n\n\t\t\tif (is(chunk, Name)) {\n\t\t\t\treturn { sql: escapeName(chunk.value), params: [] };\n\t\t\t}\n\n\t\t\tif (chunk === undefined) {\n\t\t\t\treturn { sql: '', params: [] };\n\t\t\t}\n\n\t\t\tif (Array.isArray(chunk)) {\n\t\t\t\tconst result: SQLChunk[] = [new StringChunk('(')];\n\t\t\t\tfor (const [i, p] of chunk.entries()) {\n\t\t\t\t\tresult.push(p);\n\t\t\t\t\tif (i < chunk.length - 1) {\n\t\t\t\t\t\tresult.push(new StringChunk(', '));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult.push(new StringChunk(')'));\n\t\t\t\treturn this.buildQueryFromSourceParams(result, config);\n\t\t\t}\n\n\t\t\tif (is(chunk, SQL)) {\n\t\t\t\treturn this.buildQueryFromSourceParams(chunk.queryChunks, {\n\t\t\t\t\t...config,\n\t\t\t\t\tinlineParams: inlineParams || chunk.shouldInlineParams,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (is(chunk, Table)) {\n\t\t\t\tconst schemaName = chunk[Table.Symbol.Schema];\n\t\t\t\tconst tableName = chunk[Table.Symbol.Name];\n\t\t\t\treturn {\n\t\t\t\t\tsql: schemaName === undefined\n\t\t\t\t\t\t? escapeName(tableName)\n\t\t\t\t\t\t: escapeName(schemaName) + '.' + escapeName(tableName),\n\t\t\t\t\tparams: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (is(chunk, Column)) {\n\t\t\t\treturn { sql: escapeName(chunk.table[Table.Symbol.Name]) + '.' + escapeName(chunk.name), params: [] };\n\t\t\t}\n\n\t\t\tif (is(chunk, View)) {\n\t\t\t\tconst schemaName = chunk[ViewBaseConfig].schema;\n\t\t\t\tconst viewName = chunk[ViewBaseConfig].name;\n\t\t\t\treturn {\n\t\t\t\t\tsql: schemaName === undefined\n\t\t\t\t\t\t? escapeName(viewName)\n\t\t\t\t\t\t: escapeName(schemaName) + '.' + escapeName(viewName),\n\t\t\t\t\tparams: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (is(chunk, Param)) {\n\t\t\t\tconst mappedValue = (chunk.value === null) ? null : chunk.encoder.mapToDriverValue(chunk.value);\n\n\t\t\t\tif (is(mappedValue, SQL)) {\n\t\t\t\t\treturn this.buildQueryFromSourceParams([mappedValue], config);\n\t\t\t\t}\n\n\t\t\t\tif (inlineParams) {\n\t\t\t\t\treturn { sql: this.mapInlineParam(mappedValue, config), params: [] };\n\t\t\t\t}\n\n\t\t\t\tlet typings: QueryTypingsValue[] | undefined;\n\t\t\t\tif (prepareTyping !== undefined) {\n\t\t\t\t\ttypings = [prepareTyping(chunk.encoder)];\n\t\t\t\t}\n\n\t\t\t\treturn { sql: escapeParam(paramStartIndex.value++, mappedValue), params: [mappedValue], typings };\n\t\t\t}\n\n\t\t\tif (is(chunk, Placeholder)) {\n\t\t\t\treturn { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk] };\n\t\t\t}\n\n\t\t\tif (is(chunk, SQL.Aliased) && chunk.fieldAlias !== undefined) {\n\t\t\t\treturn { sql: escapeName(chunk.fieldAlias), params: [] };\n\t\t\t}\n\n\t\t\tif (is(chunk, Subquery)) {\n\t\t\t\tif (chunk._.isWith) {\n\t\t\t\t\treturn { sql: escapeName(chunk._.alias), params: [] };\n\t\t\t\t}\n\t\t\t\treturn this.buildQueryFromSourceParams([\n\t\t\t\t\tnew StringChunk('('),\n\t\t\t\t\tchunk._.sql,\n\t\t\t\t\tnew StringChunk(') '),\n\t\t\t\t\tnew Name(chunk._.alias),\n\t\t\t\t], config);\n\t\t\t}\n\n\t\t\tif (isPgEnum(chunk)) {\n\t\t\t\tif (chunk.schema) {\n\t\t\t\t\treturn { sql: escapeName(chunk.schema) + '.' + escapeName(chunk.enumName), params: [] };\n\t\t\t\t}\n\t\t\t\treturn { sql: escapeName(chunk.enumName), params: [] };\n\t\t\t}\n\n\t\t\tif (isSQLWrapper(chunk)) {\n\t\t\t\treturn this.buildQueryFromSourceParams([\n\t\t\t\t\tnew StringChunk('('),\n\t\t\t\t\tchunk.getSQL(),\n\t\t\t\t\tnew StringChunk(')'),\n\t\t\t\t], config);\n\t\t\t}\n\n\t\t\tif (inlineParams) {\n\t\t\t\treturn { sql: this.mapInlineParam(chunk, config), params: [] };\n\t\t\t}\n\n\t\t\treturn { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk] };\n\t\t}));\n\t}\n\n\tprivate mapInlineParam(\n\t\tchunk: unknown,\n\t\t{ escapeString }: BuildQueryConfig,\n\t): string {\n\t\tif (chunk === null) {\n\t\t\treturn 'null';\n\t\t}\n\t\tif (typeof chunk === 'number' || typeof chunk === 'boolean') {\n\t\t\treturn chunk.toString();\n\t\t}\n\t\tif (typeof chunk === 'string') {\n\t\t\treturn escapeString(chunk);\n\t\t}\n\t\tif (typeof chunk === 'object') {\n\t\t\tconst mappedValueAsString = chunk.toString();\n\t\t\tif (mappedValueAsString === '[object Object]') {\n\t\t\t\treturn escapeString(JSON.stringify(chunk));\n\t\t\t}\n\t\t\treturn escapeString(mappedValueAsString);\n\t\t}\n\t\tthrow new Error('Unexpected param value: ' + chunk);\n\t}\n\n\tgetSQL(): SQL {\n\t\treturn this;\n\t}\n\n\tas(alias: string): SQL.Aliased<T>;\n\t/**\n\t * @deprecated\n\t * Use ``sql<DataType>`query`.as(alias)`` instead.\n\t */\n\tas<TData>(): SQL<TData>;\n\t/**\n\t * @deprecated\n\t * Use ``sql<DataType>`query`.as(alias)`` instead.\n\t */\n\tas<TData>(alias: string): SQL.Aliased<TData>;\n\tas(alias?: string): SQL<T> | SQL.Aliased<T> {\n\t\t// TODO: remove with deprecated overloads\n\t\tif (alias === undefined) {\n\t\t\treturn this;\n\t\t}\n\n\t\treturn new SQL.Aliased(this, alias);\n\t}\n\n\tmapWith<\n\t\tTDecoder extends\n\t\t\t| DriverValueDecoder<any, any>\n\t\t\t| DriverValueDecoder<any, any>['mapFromDriverValue'],\n\t>(decoder: TDecoder): SQL<GetDecoderResult<TDecoder>> {\n\t\tthis.decoder = typeof decoder === 'function' ? { mapFromDriverValue: decoder } : decoder;\n\t\treturn this as SQL<GetDecoderResult<TDecoder>>;\n\t}\n\n\tinlineParams(): this {\n\t\tthis.shouldInlineParams = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * This method is used to conditionally include a part of the query.\n\t *\n\t * @param condition - Condition to check\n\t * @returns itself if the condition is `true`, otherwise `undefined`\n\t */\n\tif(condition: any | undefined): this | undefined {\n\t\treturn condition ? this : undefined;\n\t}\n}\n\nexport type GetDecoderResult<T> = T extends Column ? T['_']['data'] : T extends\n\t| DriverValueDecoder<infer TData, any>\n\t| DriverValueDecoder<infer TData, any>['mapFromDriverValue'] ? TData\n: never;\n\n/**\n * Any DB name (table, column, index etc.)\n */\nexport class Name implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Name';\n\n\tprotected brand!: 'Name';\n\n\tconstructor(readonly value: string) {}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\n/**\n * Any DB name (table, column, index etc.)\n * @deprecated Use `sql.identifier` instead.\n */\nexport function name(value: string): Name {\n\treturn new Name(value);\n}\n\nexport interface DriverValueDecoder<TData, TDriverParam> {\n\tmapFromDriverValue(value: TDriverParam): TData;\n}\n\nexport interface DriverValueEncoder<TData, TDriverParam> {\n\tmapToDriverValue(value: TData): TDriverParam | SQL;\n}\n\nexport function isDriverValueEncoder(value: unknown): value is DriverValueEncoder<any, any> {\n\treturn typeof value === 'object' && value !== null && 'mapToDriverValue' in value\n\t\t&& typeof (value as any).mapToDriverValue === 'function';\n}\n\nexport const noopDecoder: DriverValueDecoder<any, any> = {\n\tmapFromDriverValue: (value) => value,\n};\n\nexport const noopEncoder: DriverValueEncoder<any, any> = {\n\tmapToDriverValue: (value) => value,\n};\n\nexport interface DriverValueMapper<TData, TDriverParam>\n\textends DriverValueDecoder<TData, TDriverParam>, DriverValueEncoder<TData, TDriverParam>\n{}\n\nexport const noopMapper: DriverValueMapper<any, any> = {\n\t...noopDecoder,\n\t...noopEncoder,\n};\n\n/** Parameter value that is optionally bound to an encoder (for example, a column). */\nexport class Param<TDataType = unknown, TDriverParamType = TDataType> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Param';\n\n\tprotected brand!: 'BoundParamValue';\n\n\t/**\n\t * @param value - Parameter value\n\t * @param encoder - Encoder to convert the value to a driver parameter\n\t */\n\tconstructor(\n\t\treadonly value: TDataType,\n\t\treadonly encoder: DriverValueEncoder<TDataType, TDriverParamType> = noopEncoder,\n\t) {}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\n/** @deprecated Use `sql.param` instead. */\nexport function param<TData, TDriver>(\n\tvalue: TData,\n\tencoder?: DriverValueEncoder<TData, TDriver>,\n): Param<TData, TDriver> {\n\treturn new Param(value, encoder);\n}\n\n/**\n * Anything that can be passed to the `` sql`...` `` tagged function.\n */\nexport type SQLChunk =\n\t| StringChunk\n\t| SQLChunk[]\n\t| SQLWrapper\n\t| SQL\n\t| Table\n\t| View\n\t| Subquery\n\t| AnyColumn\n\t| Param\n\t| Name\n\t| undefined\n\t| FakePrimitiveParam\n\t| Placeholder;\n\nexport function sql<T>(strings: TemplateStringsArray, ...params: any[]): SQL<T>;\n/*\n\tThe type of `params` is specified as `SQLSourceParam[]`, but that's slightly incorrect -\n\tin runtime, users won't pass `FakePrimitiveParam` instances as `params` - they will pass primitive values\n\twhich will be wrapped in `Param` using `buildChunksFromParam(...)`. That's why the overload\n\tspecify `params` as `any[]` and not as `SQLSourceParam[]`. This type is used to make our lives easier and\n\tthe type checker happy.\n*/\nexport function sql(strings: TemplateStringsArray, ...params: SQLChunk[]): SQL {\n\tconst queryChunks: SQLChunk[] = [];\n\tif (params.length > 0 || (strings.length > 0 && strings[0] !== '')) {\n\t\tqueryChunks.push(new StringChunk(strings[0]!));\n\t}\n\tfor (const [paramIndex, param] of params.entries()) {\n\t\tqueryChunks.push(param, new StringChunk(strings[paramIndex + 1]!));\n\t}\n\n\treturn new SQL(queryChunks);\n}\n\nexport namespace sql {\n\texport function empty(): SQL {\n\t\treturn new SQL([]);\n\t}\n\n\t/** @deprecated - use `sql.join()` */\n\texport function fromList(list: SQLChunk[]): SQL {\n\t\treturn new SQL(list);\n\t}\n\n\t/**\n\t * Convenience function to create an SQL query from a raw string.\n\t * @param str The raw SQL query string.\n\t */\n\texport function raw(str: string): SQL {\n\t\treturn new SQL([new StringChunk(str)]);\n\t}\n\n\t/**\n\t * Join a list of SQL chunks with a separator.\n\t * @example\n\t * ```ts\n\t * const query = sql.join([sql`a`, sql`b`, sql`c`]);\n\t * // sql`abc`\n\t * ```\n\t * @example\n\t * ```ts\n\t * const query = sql.join([sql`a`, sql`b`, sql`c`], sql`, `);\n\t * // sql`a, b, c`\n\t * ```\n\t */\n\texport function join(chunks: SQLChunk[], separator?: SQLChunk): SQL {\n\t\tconst result: SQLChunk[] = [];\n\t\tfor (const [i, chunk] of chunks.entries()) {\n\t\t\tif (i > 0 && separator !== undefined) {\n\t\t\t\tresult.push(separator);\n\t\t\t}\n\t\t\tresult.push(chunk);\n\t\t}\n\t\treturn new SQL(result);\n\t}\n\n\t/**\n\t * Create a SQL chunk that represents a DB identifier (table, column, index etc.).\n\t * When used in a query, the identifier will be escaped based on the DB engine.\n\t * For example, in PostgreSQL, identifiers are escaped with double quotes.\n\t *\n\t * **WARNING: This function does not offer any protection against SQL injections, so you must validate any user input beforehand.**\n\t *\n\t * @example ```ts\n\t * const query = sql`SELECT * FROM ${sql.identifier('my-table')}`;\n\t * // 'SELECT * FROM \"my-table\"'\n\t * ```\n\t */\n\texport function identifier(value: string): Name {\n\t\treturn new Name(value);\n\t}\n\n\texport function placeholder<TName extends string>(name: TName): Placeholder<TName> {\n\t\treturn new Placeholder(name);\n\t}\n\n\texport function param<TData, TDriver>(\n\t\tvalue: TData,\n\t\tencoder?: DriverValueEncoder<TData, TDriver>,\n\t): Param<TData, TDriver> {\n\t\treturn new Param(value, encoder);\n\t}\n}\n\nexport namespace SQL {\n\texport class Aliased<T = unknown> implements SQLWrapper {\n\t\tstatic readonly [entityKind]: string = 'SQL.Aliased';\n\n\t\tdeclare _: {\n\t\t\tbrand: 'SQL.Aliased';\n\t\t\ttype: T;\n\t\t};\n\n\t\t/** @internal */\n\t\tisSelectionField = false;\n\n\t\tconstructor(\n\t\t\treadonly sql: SQL,\n\t\t\treadonly fieldAlias: string,\n\t\t) {}\n\n\t\tgetSQL(): SQL {\n\t\t\treturn this.sql;\n\t\t}\n\n\t\t/** @internal */\n\t\tclone() {\n\t\t\treturn new Aliased(this.sql, this.fieldAlias);\n\t\t}\n\t}\n}\n\nexport class Placeholder<TName extends string = string, TValue = any> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Placeholder';\n\n\tdeclare protected: TValue;\n\n\tconstructor(readonly name: TName) {}\n\n\tgetSQL(): SQL {\n\t\treturn new SQL([this]);\n\t}\n}\n\n/** @deprecated Use `sql.placeholder` instead. */\nexport function placeholder<TName extends string>(name: TName): Placeholder<TName> {\n\treturn new Placeholder(name);\n}\n\nexport function fillPlaceholders(params: unknown[], values: Record<string, unknown>): unknown[] {\n\treturn params.map((p) => {\n\t\tif (is(p, Placeholder)) {\n\t\t\tif (!(p.name in values)) {\n\t\t\t\tthrow new Error(`No value for placeholder \"${p.name}\" was provided`);\n\t\t\t}\n\t\t\treturn values[p.name];\n\t\t}\n\n\t\treturn p;\n\t});\n}\n\nexport type ColumnsSelection = Record<string, unknown>;\n\nexport abstract class View<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelection extends ColumnsSelection = ColumnsSelection,\n> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'View';\n\n\tdeclare _: {\n\t\tbrand: 'View';\n\t\tviewBrand: string;\n\t\tname: TName;\n\t\texisting: TExisting;\n\t\tselectedFields: TSelection;\n\t};\n\n\t/** @internal */\n\t[ViewBaseConfig]: {\n\t\tname: TName;\n\t\toriginalName: TName;\n\t\tschema: string | undefined;\n\t\tselectedFields: SelectedFields<AnyColumn, Table>;\n\t\tisExisting: TExisting;\n\t\tquery: TExisting extends true ? undefined : SQL;\n\t\tisAlias: boolean;\n\t};\n\n\tconstructor(\n\t\t{ name, schema, selectedFields, query }: {\n\t\t\tname: TName;\n\t\t\tschema: string | undefined;\n\t\t\tselectedFields: SelectedFields<AnyColumn, Table>;\n\t\t\tquery: SQL | undefined;\n\t\t},\n\t) {\n\t\tthis[ViewBaseConfig] = {\n\t\t\tname,\n\t\t\toriginalName: name,\n\t\t\tschema,\n\t\t\tselectedFields,\n\t\t\tquery: query as (TExisting extends true ? undefined : SQL),\n\t\t\tisExisting: !query as TExisting,\n\t\t\tisAlias: false,\n\t\t};\n\t}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\n// Defined separately from the Column class to resolve circular dependency\nColumn.prototype.getSQL = function() {\n\treturn new SQL([this]);\n};\n\n// Defined separately from the Table class to resolve circular dependency\nTable.prototype.getSQL = function() {\n\treturn new SQL([this]);\n};\n\n// Defined separately from the Column class to resolve circular dependency\nSubquery.prototype.getSQL = function() {\n\treturn new SQL([this]);\n};\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgBooleanBuilderInitial<TName extends string> = PgBooleanBuilder<{\n\tname: TName;\n\tdataType: 'boolean';\n\tcolumnType: 'PgBoolean';\n\tdata: boolean;\n\tdriverParam: boolean;\n\tenumValues: undefined;\n}>;\n\nexport class PgBooleanBuilder<T extends ColumnBuilderBaseConfig<'boolean', 'PgBoolean'>> extends PgColumnBuilder<T> {\n\tstatic readonly [entityKind]: string = 'PgBooleanBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'boolean', 'PgBoolean');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgBoolean<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgBoolean<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgBoolean<T extends ColumnBaseConfig<'boolean', 'PgBoolean'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgBoolean';\n\n\tgetSQLType(): string {\n\t\treturn 'boolean';\n\t}\n}\n\nexport function boolean<TName extends string>(name: TName): PgBooleanBuilderInitial<TName> {\n\treturn new PgBooleanBuilder(name);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnDataType } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport { sql } from '~/sql/sql.ts';\nimport { PgColumnBuilder } from './common.ts';\n\nexport abstract class PgDateColumnBaseBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n> extends PgColumnBuilder<T, TRuntimeConfig> {\n\tstatic readonly [entityKind]: string = 'PgDateColumnBaseBuilder';\n\n\tdefaultNow() {\n\t\treturn this.default(sql`now()`);\n\t}\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '../table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\ntype PgIntegerBuilderInitial<TName extends string> = PgIntegerBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'PgInteger';\n\tdata: number;\n\tdriverParam: number | string;\n\tenumValues: undefined;\n}>;\n\nexport class PgIntegerBuilder<T extends ColumnBuilderBaseConfig<'number', 'PgInteger'>> extends PgColumnBuilder<T> {\n\tstatic readonly [entityKind]: string = 'PgIntegerBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'PgInteger');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgInteger<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgInteger<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgInteger<T extends ColumnBaseConfig<'number', 'PgInteger'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgInteger';\n\n\tgetSQLType(): string {\n\t\treturn 'integer';\n\t}\n\n\toverride mapFromDriverValue(value: number | string): number {\n\t\tif (typeof value === 'string') {\n\t\t\treturn Number.parseInt(value);\n\t\t}\n\t\treturn value;\n\t}\n}\n\nexport function integer<TName extends string>(name: TName): PgIntegerBuilderInitial<TName> {\n\treturn new PgIntegerBuilder(name);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport type { Writable } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\ntype PgTextBuilderInitial<TName extends string, TEnum extends [string, ...string[]]> = PgTextBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgText';\n\tdata: TEnum[number];\n\tenumValues: TEnum;\n\tdriverParam: string;\n}>;\n\nexport class PgTextBuilder<\n\tT extends ColumnBuilderBaseConfig<'string', 'PgText'>,\n> extends PgColumnBuilder<T, { enumValues: T['enumValues'] }> {\n\tstatic readonly [entityKind]: string = 'PgTextBuilder';\n\n\tconstructor(\n\t\tname: T['name'],\n\t\tconfig: PgTextConfig<T['enumValues']>,\n\t) {\n\t\tsuper(name, 'string', 'PgText');\n\t\tthis.config.enumValues = config.enum;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgText<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgText<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgText<T extends ColumnBaseConfig<'string', 'PgText'>>\n\textends PgColumn<T, { enumValues: T['enumValues'] }>\n{\n\tstatic readonly [entityKind]: string = 'PgText';\n\n\toverride readonly enumValues = this.config.enumValues;\n\n\tgetSQLType(): string {\n\t\treturn 'text';\n\t}\n}\n\nexport interface PgTextConfig<TEnum extends readonly string[] | string[] | undefined> {\n\tenum?: TEnum;\n}\n\nexport function text<TName extends string, U extends string, T extends Readonly<[U, ...U[]]>>(\n\tname: TName,\n\tconfig: PgTextConfig<T | Writable<T>> = {},\n): PgTextBuilderInitial<TName, Writable<T>> {\n\treturn new PgTextBuilder(name, config);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport type { Equal } from '~/utils.ts';\nimport { PgColumn } from './common.ts';\nimport { PgDateColumnBaseBuilder } from './date.common.ts';\n\nexport type PgTimestampBuilderInitial<TName extends string> = PgTimestampBuilder<{\n\tname: TName;\n\tdataType: 'date';\n\tcolumnType: 'PgTimestamp';\n\tdata: Date;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgTimestampBuilder<T extends ColumnBuilderBaseConfig<'date', 'PgTimestamp'>>\n\textends PgDateColumnBaseBuilder<\n\t\tT,\n\t\t{ withTimezone: boolean; precision: number | undefined }\n\t>\n{\n\tstatic readonly [entityKind]: string = 'PgTimestampBuilder';\n\n\tconstructor(\n\t\tname: string,\n\t\twithTimezone: boolean,\n\t\tprecision: number | undefined,\n\t) {\n\t\tsuper(name, 'date', 'PgTimestamp');\n\t\tthis.config.withTimezone = withTimezone;\n\t\tthis.config.precision = precision;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgTimestamp<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgTimestamp<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgTimestamp<T extends ColumnBaseConfig<'date', 'PgTimestamp'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgTimestamp';\n\n\treadonly withTimezone: boolean;\n\treadonly precision: number | undefined;\n\n\tconstructor(table: AnyPgTable<{ name: T['tableName'] }>, config: PgTimestampBuilder<T>['config']) {\n\t\tsuper(table, config);\n\t\tthis.withTimezone = config.withTimezone;\n\t\tthis.precision = config.precision;\n\t}\n\n\tgetSQLType(): string {\n\t\tconst precision = this.precision === undefined ? '' : ` (${this.precision})`;\n\t\treturn `timestamp${precision}${this.withTimezone ? ' with time zone' : ''}`;\n\t}\n\n\toverride mapFromDriverValue = (value: string): Date | null => {\n\t\treturn new Date(this.withTimezone ? value : value + '+0000');\n\t};\n\n\toverride mapToDriverValue = (value: Date): string => {\n\t\treturn value.toISOString();\n\t};\n}\n\nexport type PgTimestampStringBuilderInitial<TName extends string> = PgTimestampStringBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgTimestampString';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgTimestampStringBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgTimestampString'>>\n\textends PgDateColumnBaseBuilder<\n\t\tT,\n\t\t{ withTimezone: boolean; precision: number | undefined }\n\t>\n{\n\tstatic readonly [entityKind]: string = 'PgTimestampStringBuilder';\n\n\tconstructor(\n\t\tname: string,\n\t\twithTimezone: boolean,\n\t\tprecision: number | undefined,\n\t) {\n\t\tsuper(name, 'string', 'PgTimestampString');\n\t\tthis.config.withTimezone = withTimezone;\n\t\tthis.config.precision = precision;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgTimestampString<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgTimestampString<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgTimestampString<T extends ColumnBaseConfig<'string', 'PgTimestampString'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgTimestampString';\n\n\treadonly withTimezone: boolean;\n\treadonly precision: number | undefined;\n\n\tconstructor(table: AnyPgTable<{ name: T['tableName'] }>, config: PgTimestampStringBuilder<T>['config']) {\n\t\tsuper(table, config);\n\t\tthis.withTimezone = config.withTimezone;\n\t\tthis.precision = config.precision;\n\t}\n\n\tgetSQLType(): string {\n\t\tconst precision = this.precision === undefined ? '' : `(${this.precision})`;\n\t\treturn `timestamp${precision}${this.withTimezone ? ' with time zone' : ''}`;\n\t}\n}\n\nexport type Precision = 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\nexport interface PgTimestampConfig<TMode extends 'date' | 'string' = 'date' | 'string'> {\n\tmode?: TMode;\n\tprecision?: Precision;\n\twithTimezone?: boolean;\n}\n\nexport function timestamp<TName extends string, TMode extends PgTimestampConfig['mode'] & {}>(\n\tname: TName,\n\tconfig?: PgTimestampConfig<TMode>,\n): Equal<TMode, 'string'> extends true ? PgTimestampStringBuilderInitial<TName> : PgTimestampBuilderInitial<TName>;\nexport function timestamp(\n\tname: string,\n\tconfig: PgTimestampConfig = {},\n) {\n\tif (config.mode === 'string') {\n\t\treturn new PgTimestampStringBuilder(name, config.withTimezone ?? false, config.precision);\n\t}\n\treturn new PgTimestampBuilder(name, config.withTimezone ?? false, config.precision);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { sql } from '~/sql/sql.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgUUIDBuilderInitial<TName extends string> = PgUUIDBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgUUID';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class PgUUIDBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgUUID'>> extends PgColumnBuilder<T> {\n\tstatic readonly [entityKind]: string = 'PgUUIDBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'string', 'PgUUID');\n\t}\n\n\t/**\n\t * Adds `default gen_random_uuid()` to the column definition.\n\t */\n\tdefaultRandom(): ReturnType<this['default']> {\n\t\treturn this.default(sql`gen_random_uuid()`) as ReturnType<this['default']>;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgUUID<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgUUID<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgUUID<T extends ColumnBaseConfig<'string', 'PgUUID'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgUUID';\n\n\tgetSQLType(): string {\n\t\treturn 'uuid';\n\t}\n}\n\nexport function uuid<TName extends string>(name: TName): PgUUIDBuilderInitial<TName> {\n\treturn new PgUUIDBuilder(name);\n}\n", "import { pgTable, foreignKey, uuid, timestamp, unique, text, integer, boolean, pgEnum, serial, varchar, jsonb, decimal } from \"drizzle-orm/pg-core\"\r\nimport { is, relations, sql } from \"drizzle-orm\"\r\nexport const platformType = pgEnum(\"platform_type\", ['social', 'web3', 'listen'])\r\n\r\nexport const users = pgTable(\"users\", {\r\n  id: uuid(\"id\").default(sql`uuid_generate_v4()`).primaryKey().notNull(),\r\n});\r\n\r\nexport const artists = pgTable(\"artists\", {\r\n\tid: uuid(\"id\").default(sql`uuid_generate_v4()`).primaryKey().notNull(),\r\n\tlegacyId: text(\"legacy_id\"),\r\n\tbandcamp: text(\"bandcamp\"),\r\n\tfacebook: text(\"facebook\"),\r\n\tx: text(\"x\"),\r\n\tsoundcloud: text(\"soundcloud\"),\r\n\tnotes: text(\"notes\"),\r\n\tpatreon: text(\"patreon\"),\r\n\tname: text(\"name\"),\r\n\tinstagram: text(\"instagram\"),\r\n\tyoutube: text(\"youtube\"),\r\n\tyoutubechannel: text(\"youtubechannel\"),\r\n\tbio: text(\"bio\"),\r\n\tlcname: text(\"lcname\"),\r\n\tsoundcloudId: integer(\"soundcloudID\"),\r\n\tspotify: text(\"spotify\"),\r\n\ttwitch: text(\"twitch\"),\r\n\timdb: text(\"imdb\"),\r\n\tmusicbrainz: text(\"musicbrainz\"),\r\n\twikidata: text(\"wikidata\"),\r\n\tmixcloud: text(\"mixcloud\"),\r\n\tfacebookId: text(\"facebookID\"),\r\n\tdiscogs: text(\"discogs\"),\r\n\ttiktok: text(\"tiktok\"),\r\n\ttiktokId: text(\"tiktokID\"),\r\n\tjaxsta: text(\"jaxsta\"),\r\n\tfamousbirthdays: text(\"famousbirthdays\"),\r\n\tsongexploder: text(\"songexploder\"),\r\n\tcolorsxstudios: text(\"colorsxstudios\"),\r\n\tbandsintown: text(\"bandsintown\"),\r\n\tlinktree: text(\"linktree\"),\r\n\tonlyfans: text(\"onlyfans\"),\r\n\twikipedia: text(\"wikipedia\"),\r\n\taudius: text(\"audius\"),\r\n\tzora: text(\"zora\"),\r\n\tcatalog: text(\"catalog\"),\r\n\topensea: text(\"opensea\"),\r\n\tfoundation: text(\"foundation\"),\r\n\tlastfm: text(\"lastfm\"),\r\n\tlinkedin: text(\"linkedin\"),\r\n\tsoundxyz: text(\"soundxyz\"),\r\n\tmirror: text(\"mirror\"),\r\n\tglassnode: text(\"glassnode\"),\r\n\tcollectsNfTs: boolean(\"collectsNFTs\"),\r\n\tspotifyusername: text(\"spotifyusername\"),\r\n\tbandcampfan: text(\"bandcampfan\"),\r\n\ttellie: text(\"tellie\"),\r\n\twallets: text(\"wallets\").array(),\r\n\tens: text(\"ens\"),\r\n\tlens: text(\"lens\"),\r\n\taddedBy: uuid(\"added_by\").notNull().default(sql`uuid_generate_v4()`),\r\n\tcameo: text(\"cameo\"),\r\n\tfarcaster: text(\"farcaster\"),\r\n\tsupercollector: text(\"supercollector\"),\r\n\tcreatedAt: timestamp(\"created_at\", { withTimezone: true, mode: 'string' }).defaultNow(),\r\n\tupdatedAt: timestamp(\"updated_at\", { withTimezone: true, mode: 'string' }).default(sql`(now() AT TIME ZONE 'utc'::text)`).notNull(),\r\n},\r\n\t(table) => {\r\n\t\treturn {\r\n\t\t\tartistsAddedbyFkey: foreignKey({\r\n\t\t\t\tcolumns: [table.addedBy],\r\n\t\t\t\tforeignColumns: [users.id],\r\n\t\t\t\tname: \"artists_addedby_fkey\"\r\n\t\t\t}),\r\n\t\t}\r\n\t});\r\n\r\n\texport const aiPrompts = pgTable(\"aiprompts\", {\r\n\t\tid: uuid(\"prompt_id\").primaryKey().defaultRandom(),\r\n\t\tpromptName: text(\"prompt_name\").default(\"unnamed_prompt\"),\r\n\t\tpromptBeforeName: text(\"prompt_before_name\").notNull(),\r\n\t\tpromptAfterName: text(\"prompt_after_name\").notNull(),\r\n\t\tisDefault: boolean(\"is_default\").default(false),\r\n\t\tisEnabled: boolean(\"is_enabled\").default(false),\r\n\t\tcreatedAt: timestamp(\"created_at\").defaultNow(),\r\n\t  }\r\n\t);\r\n\r\n\texport const urlmap = pgTable(\"urlmap\", {\r\n\t\tid: uuid(\"id\").default(sql`uuid_generate_v4()`).primaryKey().notNull(),\r\n\t\tsiteUrl: text(\"site_url\").notNull(),\r\n\t\tsiteName: text(\"site_name\").notNull(),\r\n\t\texample: text(\"example\").notNull(),\r\n\t\tappStringFormat: text(\"app_string_format\").notNull(),\r\n\t\torder: integer(\"order\"),\r\n\t\tisIframeEnabled: boolean(\"is_iframe_enabled\").default(false).notNull(),\r\n\t\tisEmbedEnabled: boolean(\"is_embed_enabled\").default(false).notNull(),\r\n\t\tcardDescription: text(\"card_description\"),\r\n\t\tcardPlatformName: text(\"card_platform_name\"),\r\n\t\tisWeb3Site: boolean(\"is_web3_site\").notNull(),\r\n\t\tcreatedAt: timestamp(\"created_at\", { withTimezone: true, mode: 'string' }).default(sql`(now() AT TIME ZONE 'utc'::text)`).notNull(),\r\n\t\tupdatedAt: timestamp(\"updated_at\", { withTimezone: true, mode: 'string' }).default(sql`(now() AT TIME ZONE 'utc'::text)`),\r\n\t\tsiteImage: text(\"site_image\"),\r\n\t\tregex: text(\"regex\").default('\"\"').notNull(),\r\n\t\tregexMatcher: text(\"regex_matcher\"),\r\n\t\tisMonetized: boolean(\"is_monetized\").default(false).notNull(),\r\n\t\tregexOptions: text(\"regex_options\").array(),\r\n\t\tplatformTypeList: platformType(\"platform_type_list\").array().default([\"social\"]),\r\n\t\tcolorHex: text(\"color_hex\").notNull(),\r\n\t},\r\n\t\t(table) => {\r\n\t\t\treturn {\r\n\t\t\t\turlmapSiteurlKey: unique(\"urlmap_siteurl_key\").on(table.siteUrl),\r\n\t\t\t\turlmapSitenameKey: unique(\"urlmap_sitename_key\").on(table.siteName),\r\n\t\t\t\turlmapExampleKey: unique(\"urlmap_example_key\").on(table.example),\r\n\t\t\t\turlmapAppstingformatKey: unique(\"urlmap_appstingformat_key\").on(table.appStringFormat),\r\n\t\t\t}\r\n\t\t});", "const API = 'https://mn-chrome-ext.vercel.app';\r\nimport { cacheArtist, getCachedArtist } from '../backend/client/cache.js';\r\nimport { artists } from '../backend/server/db/schema.js';\r\n\r\n\r\n\r\nexport async function fetchArtist(info) {\r\n\r\n  console.log('fetchArtist called with:', info);\r\n\r\n  const cached = await getCachedArtist(info.id, 'id');\r\n  if (cached) {console.log(\"[DEBUG: returning cached \" + JSON.stringify(cached) + \"]\"); return cached;}\r\n\r\n    \r\n\r\n  const url = `${API}/api/artist/by-id/${encodeURIComponent(info.id)}`\r\n  console.log('Fetching artist from:', url);\r\n  const r = await fetch(url);\r\n  const artist = r.ok ? await r.json() : null;\r\n  console.log('Artist API response:', artist);\r\n  \r\n  if (artist && artist.id) {\r\n    // Fetch links for this artist using the correct endpoint\r\n    const linksUrl = `${API}/api/urlmap/links/${encodeURIComponent(artist.id)}`;\r\n    const linksResponse = await fetch(linksUrl);\r\n    artist.links = linksResponse.ok ? await linksResponse.json() : [];\r\n\r\n    try {\r\n      const spotifyUrl = `https://api.musicnerd.xyz/api/getSpotifyData?spotifyId=${artist.spotify}`;\r\n      const spotifyRes = await fetch(spotifyUrl)\r\n\r\n      if (spotifyRes.ok) {\r\n        artist.spotifyData = await spotifyRes.json();\r\n      } \r\n    } catch {\r\n      artist.spotifyData = null;\r\n    }\r\n\r\n    cacheArtist(info.id, artist, 'id');\r\n\r\n    \r\n  }\r\n  \r\n  return artist;\r\n}\r\n\r\nexport async function fetchArtistFromName(info) {\r\n\r\n  // Check cache first\r\n  const cached = await getCachedArtist(info.channel);\r\n  if (cached) return cached;\r\n\r\n  console.log('fetchArtistFromName called with:', info);\r\n  // Use batch endpoint with a single username to avoid path issues with '/'\r\n  const url = `https://api.musicnerd.xyz/api/searchArtists/batch`;\r\n  console.log('Fetching artist from (batch-single):', info.channel);\r\n  const r = await fetch(url, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },\r\n    body: JSON.stringify({ query: { artists: [info.channel] } })\r\n  });\r\n  const data = r.ok ? await r.json() : { artists: [null] };\r\n  const artist = Array.isArray(data.results) ? data.results[0] : null;\r\n  console.log('Artist API response:', artist);\r\n\r\n  if (artist.matchScore != 0) {\r\n    return null;\r\n  }\r\n  \r\n  if (artist && artist.id) {\r\n    // Fetch links for this artist using the correct endpoint  \r\n    console.log(\"fetching links...\")\r\n    const linksUrl = `${API}/api/urlmap/links/${encodeURIComponent(artist.id)}`;\r\n    const linksResponse = await fetch(linksUrl);\r\n    console.log(\"Links: \"+ linksResponse);\r\n\r\n    \r\n    artist.links = linksResponse.ok ? await linksResponse.json() : [];\r\n\r\n    try {\r\n      const bioRes = await fetch(`https://api.musicnerd.xyz/api/artistBio/${encodeURIComponent(artist.id)}`, {\r\n        headers: { Accept: 'application/json' }\r\n      });\r\n      if (bioRes.ok) {\r\n        const bioJson = await bioRes.json();\r\n        artist.bio = typeof bioJson === 'string' ? bioJson : (bioJson?.bio ?? bioJson?.text ?? null);\r\n      } else {\r\n        artist.bio = null;\r\n      }\r\n    } catch {\r\n      artist.bio = null;\r\n    }\r\n\r\n    try {\r\n      const spotifyUrl = `https://api.musicnerd.xyz/api/getSpotifyData?spotifyId=${artist.spotify}`;\r\n      const spotifyRes = await fetch(spotifyUrl)\r\n\r\n      if (spotifyRes.ok) {\r\n        artist.spotifyData = await spotifyRes.json();\r\n      } \r\n    } catch {\r\n      artist.spotifyData = null;\r\n    }\r\n\r\n\r\n    cacheArtist(info.channel, artist);\r\n  }\r\n  \r\n  return artist;\r\n}\r\n\r\nexport async function extractArtistFromTitle(titleOrData) {\r\n  const url = `${API}/api/openai/extract-artist`;\r\n  \r\n  // Support both legacy title string and new data object\r\n  const requestBody = typeof titleOrData === 'string' \r\n    ? { title: titleOrData }\r\n    : { data: titleOrData };\r\n  \r\n  const response = await fetch(url, {\r\n    method: 'POST',\r\n    headers: {'Content-Type': 'application/json'},\r\n    body: JSON.stringify(requestBody)\r\n  });\r\n\r\n  if (!response.ok) return null;\r\n  const data = await response.json();\r\n  return data.artist; // Returns string or null\r\n}\r\n\r\nexport async function extractMultipleArtistsFromTitle(titleOrData) {\r\n  const url = `${API}/api/openai/extract-multiple-artists`;\r\n  \r\n  // Support both legacy title string and new data object\r\n  const requestBody = typeof titleOrData === 'string' \r\n    ? { title: titleOrData }\r\n    : { data: titleOrData };\r\n  \r\n  const response = await fetch(url, {\r\n    method: 'POST',\r\n    headers: {'Content-Type': 'application/json'},\r\n    body: JSON.stringify(requestBody)\r\n  });\r\n\r\n  if (!response.ok) return [];\r\n  const data = await response.json();\r\n  return data.artists || []; // Returns array of strings\r\n}\r\n\r\nexport async function fetchMultipleArtistsByNames(artistNames) {\r\n  if (!artistNames || artistNames.length === 0) return [];\r\n\r\n  console.log('fetchMultipleArtistsByNames called with:', artistNames);\r\n  \r\n  const url = `https://api.musicnerd.xyz/api/searchArtists/batch`;\r\n  const response = await fetch(url, {\r\n    method: 'POST',\r\n    headers: {'Content-Type': 'application/json', 'Accept': 'application/json'},\r\n    body: JSON.stringify({ query: { artists: artistNames } })\r\n  });\r\n\r\n  if (!response.ok) {\r\n    console.error('Batch artist fetch failed:', response.status, response.statusText);\r\n    return [];\r\n  }\r\n\r\n  const data = await response.json();\r\n  const results = Array.isArray(data.results) ? data.results : [];\r\n  console.log('Batch artist API response:', data);\r\n\r\n  const filtered = results.filter(a =>\r\n    a && a.id && a.matchScore == 0\r\n  );\r\n\r\n  if (filtered.length == 0) {\r\n    return null;\r\n  }\r\n\r\n  const artistIds = filtered.map(a => a.id);\r\n\r\n  let joinedIds = artistIds.join(',');\r\n\r\n  if (artistIds.length === 1) {\r\n    joinedIds = artistIds.join();\r\n  }\r\n\r\n  console.log(\"artists: \" + artistIds.length);\r\n\r\n  const linksRes = await fetch(`${API}/api/urlmap/links/${joinedIds}`);\r\n  \r\n\r\n  const allLinks = await linksRes.json();\r\n\r\n  const spotifyIds = filtered.map(a => a.spotify);\r\n\r\n  const spotifyRes = await fetch(`https://api.musicnerd.xyz/api/getSpotifyData?spotifyIds=${spotifyIds.join(',')}`);\r\n  \r\n  const spotifyInfo= await spotifyRes.json();\r\n\r\n  const withBio = await Promise.all(filtered.map(async (artist) => {\r\n\r\n        if (!artist || !artist.id) return artist;\r\n        const bioUrl = `https://api.musicnerd.xyz/api/artistBio/${encodeURIComponent(artist.id)}`;\r\n      \r\n        const bioRes = await \r\n          fetch(bioUrl, {\r\n            method: 'GET',\r\n            headers: { Accept: 'application/json' },\r\n          });\r\n              \r\n        const bio = bioRes.ok ? await bioRes.json() : null;\r\n\r\n        return { ...artist, bio};\r\n    }));\r\n    if (artistIds.length == 1) {\r\n      const withData = withBio.map(artist => ({\r\n        ...artist, \r\n        links: allLinks,\r\n        spotifyData: spotifyInfo.data?.find(s => s.id === artist.spotify) || null\r\n    }));\r\n\r\n      return withData;\r\n    }\r\n      const withData = withBio.map(artist => ({\r\n        ...artist, \r\n        links: allLinks[artist.id] || [],\r\n        spotifyData: spotifyInfo.data?.find(s => s.id === artist.spotify) || null\r\n      }));\r\n\r\n      return withData;\r\n    \r\n  \r\n}\r\n\r\n", "export function getYTInfo(tabId){\r\n    return new Promise(res=>{\r\n      chrome.tabs.sendMessage(tabId,{type:'GET_YT_INFO'},res);\r\n    });\r\n  }\r\n\r\nexport function scrapeYTInfo(tabId) {\r\n    return new Promise(res => {\r\n        chrome.tabs.sendMessage(tabId, {type: 'SCRAPE_YT_INFO'}, res);\r\n    });\r\n}\r\n\r\nexport async function getMediaSessionInfo(tabId) {\r\ntry {\r\n  const tabs = await chrome.tabs.query({});\r\n  \r\n  const promises = tabs.map(tab =>\r\n    new Promise(resolve => {\r\n      chrome.tabs.sendMessage(tab.id, {action: 'checkMediaSession'}, response => {\r\n        if (chrome.runtime.lastError) {\r\n          resolve(null);\r\n        } else  {\r\n          resolve(response);\r\n        }\r\n      });\r\n    })\r\n  );\r\n\r\n  const results = await Promise.all(promises);\r\n\r\n  console.log(results);\r\n  return results.find(result => result != null && result !== undefined);\r\n} catch(error) {\r\n  console.error('Error getting media session results', error);\r\n}\r\n}\r\n\r\nexport async function isContentScriptReady(tabId) {\r\n  return new Promise((resolve) => {\r\n    chrome.tabs.sendMessage(tabId, {action: 'checkMediaSession'}, (response) => {\r\n      if (chrome.runtime.lastError) {\r\n        resolve(false);\r\n      } else {\r\n        resolve(true);\r\n      }\r\n    });\r\n  });\r\n}", "// Fast hardcoded pattern matching for collaboration detection\r\nexport function hasCollaborationKeywords(title) {\r\n    const patterns = [\r\n      /\\bft\\.?\\s/i,                    // \"ft. \" or \"ft \"\r\n      /\\bfeat\\.?\\s/i,                  // \"feat. \" or \"feat \"  \r\n      /\\bfeaturing\\b/i,                // \"featuring\"\r\n      /\\bwith\\b/i,                     // \"with\"\r\n      /\\sx\\s/i,                        // \" x \" (Artist x Artist)\r\n      /\\s&\\s/,                         // \" & \"\r\n      /\\s\\+\\s/,                        // \" + \"\r\n      /\\bvs\\.?\\b/i,                    // \"vs\" or \"vs.\"\r\n      /\\b(collab|collaboration)\\b/i,   // \"collab\", \"collaboration\"\r\n      /\\bremix by\\b/i,                 // \"remix by\"\r\n      /\\bprod\\.? by\\b/i               // \"prod by\", \"produced by\"\r\n    ];\r\n    \r\n    return patterns.some(pattern => pattern.test(title));\r\n  }\r\n  \r\n  export function shouldCheckForCollaborations(title) {\r\n    // Quick check before doing full multi-artist extraction\r\n    return hasCollaborationKeywords(title);\r\n  } ", "import { fetchArtist, fetchArtistFromName, extractArtistFromTitle, extractMultipleArtistsFromTitle, fetchMultipleArtistsByNames}   from './api.js';\r\nimport { getYTInfo, scrapeYTInfo, getMediaSessionInfo  }     from '../backend/browserInfo.js';\r\nimport { hasCollaborationKeywords } from '../backend/client/collabs.js';\r\nimport { cacheVideoResult, getCachedVideoResult, cacheArtist, getCachedArtist, getCachedMediaSessionResult, cacheMediaSessionResult } from '../backend/client/cache.js';\r\n\r\n// Helper function to extract video ID from URL\r\nfunction getVideoIdFromUrl(url) {\r\n    const patterns = [\r\n        /v=([^&]+)/,\r\n        /youtu\\.be\\/([^?&]+)/,\r\n        /music\\.youtube\\.com\\/watch\\?v=([^&]+)/\r\n    ];\r\n    for (const pattern of patterns) {\r\n        const match = url.match(pattern);\r\n        if (match) return match[1];\r\n    }\r\n    return null;\r\n}\r\n\r\nexport async function fetchMultipleArtists(tabId) {\r\n    // First check for cached video result using tab URL\r\n    const [tab] = await chrome.tabs.query({active: true, currentWindow: true});\r\n    let videoId = null;\r\n    if (tab?.url) {\r\n        videoId = getVideoIdFromUrl(tab.url);\r\n        if (videoId) {\r\n            const cached = await getCachedVideoResult(videoId);\r\n            if (cached) {\r\n                console.log('Returning cached video result for:', videoId);\r\n                return cached;\r\n            }\r\n        }\r\n    }\r\n\r\n    const info = await getYTInfo(tabId);\r\n    let artists = [];\r\n  \r\n    if (info?.id) {\r\n      console.log(\"[DEBUG] \" + info.id);\r\n      const artist = await fetchArtist(info);\r\n      if (artist.id) {\r\n          artists.push({...artist, isPrimary: true});\r\n\r\n          console.log(\"[DEBUG] Youtube lookup successful: \" + artists);\r\n      \r\n          if (hasCollaborationKeywords(info.title)) {\r\n              const allArtistNames = await extractMultipleArtistsFromTitle(info);\r\n              const newNames = allArtistNames.filter(name =>\r\n                  name.toLowerCase() !== artist.name.toLowerCase()\r\n              );\r\n  \r\n              if (newNames.length > 0) {\r\n                  const newArtists = await fetchMultipleArtistsByNames(newNames);\r\n                  const validArtists = newArtists\r\n                      .filter(artist => artist && !artist.error && artist.id)\r\n                      .map(artist => ({...artist, isPrimary: false}));\r\n                  \r\n                  artists.push(...validArtists);\r\n              }\r\n          }   \r\n          \r\n          // Only return early if we found at least one artist\r\n\r\n          if (artists.length > 0) {\r\n              if (videoId) {\r\n                await cacheVideoResult(videoId, artists);\r\n              }\r\n              return artists;\r\n          }\r\n      }\r\n    }\r\n  if (!info?.title || artists.length === 0) {\r\n    console.log(\"falling back to AI\")\r\n    const artistNames = await extractMultipleArtistsFromTitle(info);\r\n    console.log(artistNames);\r\n    \r\n    if (artistNames.length > 0) {\r\n      const foundArtists = await fetchMultipleArtistsByNames(artistNames);\r\n      \r\n      if (!foundArtists) {\r\n        return null;\r\n      }\r\n      \r\n      const validArtists = foundArtists\r\n        .filter(artist => artist && !artist.error && artist.id)\r\n        .map(artist => ({ ...artist, isPrimary: false }));\r\n      \r\n      \r\n      artists.push(...validArtists);\r\n    }\r\n  }\r\n  \r\n  // Note: Can't use DOM scraping fallback for media session since we don't have tabId\r\n  if (videoId) {\r\n    await cacheVideoResult(videoId, artists);\r\n  }\r\n  return artists;\r\n  }\r\n  \r\nexport async function fetchArtistsMediaSession() {\r\n  const info = await getMediaSessionInfo();\r\n  console.log('Media session info:', info); // Debug log\r\n  \r\n  \r\n  if (!info) {\r\n    console.log('No media session data available');\r\n    return \"noMediaSession\";\r\n  }\r\n\r\n  const cached = await getCachedMediaSessionResult(info);\r\n  if (cached) {\r\n    console.log(\"cached result found, returning...\") ;\r\n    return cached;\r\n  }\r\n\r\n  let artists = [];\r\n  \r\n    const artistNames = await extractMultipleArtistsFromTitle(info);\r\n    console.log(artistNames);\r\n    \r\n    if (artistNames.length > 0) {\r\n      const foundArtists = await fetchMultipleArtistsByNames(artistNames);\r\n      const validArtists = foundArtists\r\n        .filter(artist => artist && !artist.error && artist.id)\r\n        .map(artist => ({ ...artist, isPrimary: false }));\r\n      \r\n      artists.push(...validArtists);\r\n\r\n      cacheMediaSessionResult(info, artists);\r\n    }\r\n  console.log(\"returning artists...\")\r\n  \r\n  return artists;\r\n  \r\n}\r\n", "\r\nimport { renderArtists } from './multi-ui.js';\r\nimport { errorScreen } from './ui.js';\r\nimport { fetchMultipleArtists, fetchArtistsMediaSession } from '../../connections/fetchArtists.js';\r\nimport { isContentScriptReady } from '../../backend/browserInfo.js';\r\nimport { getCachedArtist } from '../../backend/client/cache.js';\r\n\r\n\r\n\r\n\r\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', async () => {\r\n  const [tab] = await chrome.tabs.query({active:true,currentWindow:true});\r\n  \r\n  // Check if we're on a YouTube page\r\n\r\n  if (!await isContentScriptReady(tab.id)) {\r\n    errorScreen(\"notInjected\");\r\n    return;\r\n  }\r\n\r\n  if (!tab.url.includes('youtube.com/watch') && !tab.url.includes('music.youtube.com')) {\r\n    const artists = await fetchArtistsMediaSession();\r\n    if (artists) {\r\n      console.log (\"found artists, rendering: \" + artists.length + \" artists\");\r\n      if (artists.length > 0 && artists != \"noMediaSession\") {\r\n        renderArtists(artists);\r\n      }\r\n      else if (artists == \"noMediaSession\") {\r\n        errorScreen(\"noData\");\r\n      }\r\n      else {\r\n        errorScreen(\"noArtist\");\r\n      }\r\n    }\r\n    else {\r\n      console.log(\"[ERROR] no artist returned for mediaSession\")\r\n      errorScreen(\"noArtist\");\r\n    }// Show \"not on YouTube\" message\r\n    return;\r\n  }\r\n\r\n  \r\n\r\n  const artists = await fetchMultipleArtists(tab.id);\r\n  console.log(\"rendering multiple artists: artists number is \" + artists.length);\r\n  if (artists) {\r\n    console.log(artists);\r\n    if (artists.length > 0) {\r\n      renderArtists(artists);\r\n    }\r\n    else {\r\n      console.log(\"[ERROR] no artists detected, showing error\")\r\n      errorScreen(\"noArtist\");\r\n    }\r\n  }\r\n  else {\r\n    errorScreen(\"noArtist\");\r\n  }\r\n  \r\n\r\n});\r\n\r\n\r\n  \r\n  \r\n"],
  "mappings": "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",
  "names": ["artists", "_a", "_a", "_a", "_b", "_c", "_d", "name", "_a", "_a", "value", "startFrom", "_a", "_b", "ref", "actions", "_a", "_b", "_a", "sql", "_b", "otel", "rawTracer", "_a", "_a", "param", "sql", "placeholder", "name", "SQL", "_a", "_a", "_b", "name", "_a", "_b", "_a", "_b", "_a", "_b", "_a", "_b", "_a", "_b", "_a", "_b", "bio", "withData", "artists", "artist", "artists"]
}
